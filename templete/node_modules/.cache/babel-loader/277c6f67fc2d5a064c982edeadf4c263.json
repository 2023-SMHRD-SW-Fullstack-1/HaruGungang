{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"FEATURES\", {\n  enumerable: true,\n  get: function () {\n    return _features.FEATURES;\n  }\n});\nObject.defineProperty(exports, \"buildCheckInRHS\", {\n  enumerable: true,\n  get: function () {\n    return _fields.buildCheckInRHS;\n  }\n});\nexports.createClassFeaturePlugin = createClassFeaturePlugin;\nObject.defineProperty(exports, \"enableFeature\", {\n  enumerable: true,\n  get: function () {\n    return _features.enableFeature;\n  }\n});\nObject.defineProperty(exports, \"injectInitialization\", {\n  enumerable: true,\n  get: function () {\n    return _misc.injectInitialization;\n  }\n});\nvar _core = require(\"@babel/core\");\nvar _helperFunctionName = require(\"@babel/helper-function-name\");\nvar _helperSplitExportDeclaration = require(\"@babel/helper-split-export-declaration\");\nvar _semver = require(\"semver\");\nvar _fields = require(\"./fields\");\nvar _decorators = require(\"./decorators\");\nvar _misc = require(\"./misc\");\nvar _features = require(\"./features\");\nvar _typescript = require(\"./typescript\");\nconst versionKey = \"@babel/plugin-class-features/version\";\nfunction createClassFeaturePlugin({\n  name,\n  feature,\n  loose,\n  manipulateOptions,\n  api,\n  inherits\n}) {\n  {\n    var _api;\n    (_api = api) != null ? _api : api = {\n      assumption: () => void 0\n    };\n  }\n  const setPublicClassFields = api.assumption(\"setPublicClassFields\");\n  const privateFieldsAsSymbols = api.assumption(\"privateFieldsAsSymbols\");\n  const privateFieldsAsProperties = api.assumption(\"privateFieldsAsProperties\");\n  const constantSuper = api.assumption(\"constantSuper\");\n  const noDocumentAll = api.assumption(\"noDocumentAll\");\n  if (privateFieldsAsProperties && privateFieldsAsSymbols) {\n    throw new Error(`Cannot enable both the \"privateFieldsAsProperties\" and ` + `\"privateFieldsAsSymbols\" assumptions as the same time.`);\n  }\n  const privateFieldsAsSymbolsOrProperties = privateFieldsAsProperties || privateFieldsAsSymbols;\n  if (loose === true) {\n    const explicit = [];\n    if (setPublicClassFields !== undefined) {\n      explicit.push(`\"setPublicClassFields\"`);\n    }\n    if (privateFieldsAsProperties !== undefined) {\n      explicit.push(`\"privateFieldsAsProperties\"`);\n    }\n    if (privateFieldsAsSymbols !== undefined) {\n      explicit.push(`\"privateFieldsAsSymbols\"`);\n    }\n    if (explicit.length !== 0) {\n      console.warn(`[${name}]: You are using the \"loose: true\" option and you are` + ` explicitly setting a value for the ${explicit.join(\" and \")}` + ` assumption${explicit.length > 1 ? \"s\" : \"\"}. The \"loose\" option` + ` can cause incompatibilities with the other class features` + ` plugins, so it's recommended that you replace it with the` + ` following top-level option:\\n` + `\\t\"assumptions\": {\\n` + `\\t\\t\"setPublicClassFields\": true,\\n` + `\\t\\t\"privateFieldsAsSymbols\": true\\n` + `\\t}`);\n    }\n  }\n  return {\n    name,\n    manipulateOptions,\n    inherits,\n    pre(file) {\n      (0, _features.enableFeature)(file, feature, loose);\n      {\n        if (typeof file.get(versionKey) === \"number\") {\n          file.set(versionKey, \"7.22.5\");\n          return;\n        }\n      }\n      if (!file.get(versionKey) || _semver.lt(file.get(versionKey), \"7.22.5\")) {\n        file.set(versionKey, \"7.22.5\");\n      }\n    },\n    visitor: {\n      Class(path, {\n        file\n      }) {\n        if (file.get(versionKey) !== \"7.22.5\") return;\n        if (!(0, _features.shouldTransform)(path, file)) return;\n        if (path.isClassDeclaration()) (0, _typescript.assertFieldTransformed)(path);\n        const loose = (0, _features.isLoose)(file, feature);\n        let constructor;\n        const isDecorated = (0, _decorators.hasDecorators)(path.node);\n        const props = [];\n        const elements = [];\n        const computedPaths = [];\n        const privateNames = new Set();\n        const body = path.get(\"body\");\n        for (const path of body.get(\"body\")) {\n          if ((path.isClassProperty() || path.isClassMethod()) && path.node.computed) {\n            computedPaths.push(path);\n          }\n          if (path.isPrivate()) {\n            const {\n              name\n            } = path.node.key.id;\n            const getName = `get ${name}`;\n            const setName = `set ${name}`;\n            if (path.isClassPrivateMethod()) {\n              if (path.node.kind === \"get\") {\n                if (privateNames.has(getName) || privateNames.has(name) && !privateNames.has(setName)) {\n                  throw path.buildCodeFrameError(\"Duplicate private field\");\n                }\n                privateNames.add(getName).add(name);\n              } else if (path.node.kind === \"set\") {\n                if (privateNames.has(setName) || privateNames.has(name) && !privateNames.has(getName)) {\n                  throw path.buildCodeFrameError(\"Duplicate private field\");\n                }\n                privateNames.add(setName).add(name);\n              }\n            } else {\n              if (privateNames.has(name) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name) && (privateNames.has(getName) || privateNames.has(setName))) {\n                throw path.buildCodeFrameError(\"Duplicate private field\");\n              }\n              privateNames.add(name);\n            }\n          }\n          if (path.isClassMethod({\n            kind: \"constructor\"\n          })) {\n            constructor = path;\n          } else {\n            elements.push(path);\n            if (path.isProperty() || path.isPrivate() || path.isStaticBlock != null && path.isStaticBlock()) {\n              props.push(path);\n            }\n          }\n        }\n        {\n          if (!props.length && !isDecorated) return;\n        }\n        const innerBinding = path.node.id;\n        let ref;\n        if (!innerBinding || path.isClassExpression()) {\n          (0, _helperFunctionName.default)(path);\n          ref = path.scope.generateUidIdentifier(\"class\");\n        } else {\n          ref = _core.types.cloneNode(path.node.id);\n        }\n        const privateNamesMap = (0, _fields.buildPrivateNamesMap)(props);\n        const privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, privateFieldsAsProperties != null ? privateFieldsAsProperties : loose, privateFieldsAsSymbols != null ? privateFieldsAsSymbols : false, file);\n        (0, _fields.transformPrivateNamesUsage)(ref, path, privateNamesMap, {\n          privateFieldsAsProperties: privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose,\n          noDocumentAll,\n          innerBinding\n        }, file);\n        let keysNodes, staticNodes, instanceNodes, pureStaticNodes, wrapClass;\n        {\n          if (isDecorated) {\n            staticNodes = pureStaticNodes = keysNodes = [];\n            ({\n              instanceNodes,\n              wrapClass\n            } = (0, _decorators.buildDecoratedClass)(ref, path, elements, file));\n          } else {\n            keysNodes = (0, _misc.extractComputedKeys)(path, computedPaths, file);\n            ({\n              staticNodes,\n              pureStaticNodes,\n              instanceNodes,\n              wrapClass\n            } = (0, _fields.buildFieldsInitNodes)(ref, path.node.superClass, props, privateNamesMap, file, setPublicClassFields != null ? setPublicClassFields : loose, privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose, constantSuper != null ? constantSuper : loose, innerBinding));\n          }\n        }\n        if (instanceNodes.length > 0) {\n          (0, _misc.injectInitialization)(path, constructor, instanceNodes, (referenceVisitor, state) => {\n            {\n              if (isDecorated) return;\n            }\n            for (const prop of props) {\n              if (_core.types.isStaticBlock != null && _core.types.isStaticBlock(prop.node) || prop.node.static) continue;\n              prop.traverse(referenceVisitor, state);\n            }\n          });\n        }\n        const wrappedPath = wrapClass(path);\n        wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]);\n        if (staticNodes.length > 0) {\n          wrappedPath.insertAfter(staticNodes);\n        }\n        if (pureStaticNodes.length > 0) {\n          wrappedPath.find(parent => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes);\n        }\n      },\n      ExportDefaultDeclaration(path, {\n        file\n      }) {\n        {\n          if (file.get(versionKey) !== \"7.22.5\") return;\n          const decl = path.get(\"declaration\");\n          if (decl.isClassDeclaration() && (0, _decorators.hasDecorators)(decl.node)) {\n            if (decl.node.id) {\n              (0, _helperSplitExportDeclaration.default)(path);\n            } else {\n              decl.node.type = \"ClassExpression\";\n            }\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../src/index.ts"],"names":["versionKey","createClassFeaturePlugin","name","feature","loose","manipulateOptions","api","inherits","assumption","setPublicClassFields","privateFieldsAsSymbols","privateFieldsAsProperties","constantSuper","noDocumentAll","Error","privateFieldsAsSymbolsOrProperties","explicit","undefined","push","length","console","warn","join","pre","file","get","set","semver","lt","visitor","Class","path","isClassDeclaration","constructor","isDecorated","node","props","elements","computedPaths","privateNames","Set","body","isClassProperty","isClassMethod","computed","isPrivate","key","id","getName","setName","isClassPrivateMethod","kind","has","buildCodeFrameError","add","isProperty","isStaticBlock","innerBinding","ref","isClassExpression","scope","generateUidIdentifier","t","cloneNode","privateNamesMap","privateNamesNodes","keysNodes","staticNodes","instanceNodes","pureStaticNodes","wrapClass","superClass","referenceVisitor","state","prop","static","traverse","wrappedPath","insertBefore","insertAfter","find","parent","isStatement","isDeclaration","ExportDefaultDeclaration","decl","type"],"mappings":"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","sourcesContent":["import { types as t } from \"@babel/core\";\nimport type { PluginAPI, PluginObject } from \"@babel/core\";\nimport type { NodePath } from \"@babel/traverse\";\nimport nameFunction from \"@babel/helper-function-name\";\nimport splitExportDeclaration from \"@babel/helper-split-export-declaration\";\n\nimport semver from \"semver\";\n\nimport {\n  buildPrivateNamesNodes,\n  buildPrivateNamesMap,\n  transformPrivateNamesUsage,\n  buildFieldsInitNodes,\n  buildCheckInRHS,\n} from \"./fields\";\nimport type { PropPath } from \"./fields\";\nimport { buildDecoratedClass, hasDecorators } from \"./decorators\";\nimport { injectInitialization, extractComputedKeys } from \"./misc\";\nimport { enableFeature, FEATURES, isLoose, shouldTransform } from \"./features\";\nimport { assertFieldTransformed } from \"./typescript\";\n\nexport { FEATURES, enableFeature, injectInitialization, buildCheckInRHS };\n\nconst versionKey = \"@babel/plugin-class-features/version\";\n\ninterface Options {\n  name: string;\n  feature: number;\n  loose?: boolean;\n  inherits?: PluginObject[\"inherits\"];\n  manipulateOptions?: PluginObject[\"manipulateOptions\"];\n  api?: PluginAPI;\n}\n\nexport function createClassFeaturePlugin({\n  name,\n  feature,\n  loose,\n  manipulateOptions,\n  api,\n  inherits,\n}: Options): PluginObject {\n  if (!process.env.BABEL_8_BREAKING) {\n    api ??= { assumption: () => void 0 as any } as any;\n  }\n  const setPublicClassFields = api.assumption(\"setPublicClassFields\");\n  const privateFieldsAsSymbols = api.assumption(\"privateFieldsAsSymbols\");\n  const privateFieldsAsProperties = api.assumption(\"privateFieldsAsProperties\");\n  const constantSuper = api.assumption(\"constantSuper\");\n  const noDocumentAll = api.assumption(\"noDocumentAll\");\n\n  if (privateFieldsAsProperties && privateFieldsAsSymbols) {\n    throw new Error(\n      `Cannot enable both the \"privateFieldsAsProperties\" and ` +\n        `\"privateFieldsAsSymbols\" assumptions as the same time.`,\n    );\n  }\n  const privateFieldsAsSymbolsOrProperties =\n    privateFieldsAsProperties || privateFieldsAsSymbols;\n\n  if (loose === true) {\n    type AssumptionName = Parameters<PluginAPI[\"assumption\"]>[0];\n    const explicit: `\"${AssumptionName}\"`[] = [];\n\n    if (setPublicClassFields !== undefined) {\n      explicit.push(`\"setPublicClassFields\"`);\n    }\n    if (privateFieldsAsProperties !== undefined) {\n      explicit.push(`\"privateFieldsAsProperties\"`);\n    }\n    if (privateFieldsAsSymbols !== undefined) {\n      explicit.push(`\"privateFieldsAsSymbols\"`);\n    }\n    if (explicit.length !== 0) {\n      console.warn(\n        `[${name}]: You are using the \"loose: true\" option and you are` +\n          ` explicitly setting a value for the ${explicit.join(\" and \")}` +\n          ` assumption${explicit.length > 1 ? \"s\" : \"\"}. The \"loose\" option` +\n          ` can cause incompatibilities with the other class features` +\n          ` plugins, so it's recommended that you replace it with the` +\n          ` following top-level option:\\n` +\n          `\\t\"assumptions\": {\\n` +\n          `\\t\\t\"setPublicClassFields\": true,\\n` +\n          `\\t\\t\"privateFieldsAsSymbols\": true\\n` +\n          `\\t}`,\n      );\n    }\n  }\n\n  return {\n    name,\n    manipulateOptions,\n    inherits,\n\n    pre(file) {\n      enableFeature(file, feature, loose);\n\n      if (!process.env.BABEL_8_BREAKING) {\n        // Until 7.21.4, we used to encode the version as a number.\n        // If file.get(versionKey) is a number, it has thus been\n        // set by an older version of this plugin.\n        if (typeof file.get(versionKey) === \"number\") {\n          file.set(versionKey, PACKAGE_JSON.version);\n          return;\n        }\n      }\n      if (\n        !file.get(versionKey) ||\n        semver.lt(file.get(versionKey), PACKAGE_JSON.version)\n      ) {\n        file.set(versionKey, PACKAGE_JSON.version);\n      }\n    },\n\n    visitor: {\n      Class(path, { file }) {\n        if (file.get(versionKey) !== PACKAGE_JSON.version) return;\n\n        if (!shouldTransform(path, file)) return;\n\n        if (path.isClassDeclaration()) assertFieldTransformed(path);\n\n        const loose = isLoose(file, feature);\n\n        let constructor: NodePath<t.ClassMethod>;\n        const isDecorated = hasDecorators(path.node);\n        const props: PropPath[] = [];\n        const elements = [];\n        const computedPaths: NodePath<t.ClassProperty | t.ClassMethod>[] = [];\n        const privateNames = new Set<string>();\n        const body = path.get(\"body\");\n\n        for (const path of body.get(\"body\")) {\n          if (\n            // check path.node.computed is enough, but ts will complain\n            (path.isClassProperty() || path.isClassMethod()) &&\n            path.node.computed\n          ) {\n            computedPaths.push(path);\n          }\n\n          if (path.isPrivate()) {\n            const { name } = path.node.key.id;\n            const getName = `get ${name}`;\n            const setName = `set ${name}`;\n\n            if (path.isClassPrivateMethod()) {\n              if (path.node.kind === \"get\") {\n                if (\n                  privateNames.has(getName) ||\n                  (privateNames.has(name) && !privateNames.has(setName))\n                ) {\n                  throw path.buildCodeFrameError(\"Duplicate private field\");\n                }\n                privateNames.add(getName).add(name);\n              } else if (path.node.kind === \"set\") {\n                if (\n                  privateNames.has(setName) ||\n                  (privateNames.has(name) && !privateNames.has(getName))\n                ) {\n                  throw path.buildCodeFrameError(\"Duplicate private field\");\n                }\n                privateNames.add(setName).add(name);\n              }\n            } else {\n              if (\n                (privateNames.has(name) &&\n                  !privateNames.has(getName) &&\n                  !privateNames.has(setName)) ||\n                (privateNames.has(name) &&\n                  (privateNames.has(getName) || privateNames.has(setName)))\n              ) {\n                throw path.buildCodeFrameError(\"Duplicate private field\");\n              }\n\n              privateNames.add(name);\n            }\n          }\n\n          if (path.isClassMethod({ kind: \"constructor\" })) {\n            constructor = path;\n          } else {\n            elements.push(path);\n            if (\n              path.isProperty() ||\n              path.isPrivate() ||\n              path.isStaticBlock?.()\n            ) {\n              props.push(path as PropPath);\n            }\n          }\n        }\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (!props.length) return;\n        } else {\n          if (!props.length && !isDecorated) return;\n        }\n\n        const innerBinding = path.node.id;\n        let ref: t.Identifier;\n        if (!innerBinding || path.isClassExpression()) {\n          nameFunction(path);\n          ref = path.scope.generateUidIdentifier(\"class\");\n        } else {\n          ref = t.cloneNode(path.node.id);\n        }\n\n        // NODE: These three functions don't support decorators yet,\n        //       but verifyUsedFeatures throws if there are both\n        //       decorators and private fields.\n        const privateNamesMap = buildPrivateNamesMap(props);\n        const privateNamesNodes = buildPrivateNamesNodes(\n          privateNamesMap,\n          privateFieldsAsProperties ?? loose,\n          privateFieldsAsSymbols ?? false,\n          file,\n        );\n\n        transformPrivateNamesUsage(\n          ref,\n          path,\n          privateNamesMap,\n          {\n            privateFieldsAsProperties:\n              privateFieldsAsSymbolsOrProperties ?? loose,\n            noDocumentAll,\n            innerBinding,\n          },\n          file,\n        );\n\n        let keysNodes: t.Statement[],\n          staticNodes: t.Statement[],\n          instanceNodes: t.Statement[],\n          pureStaticNodes: t.FunctionDeclaration[],\n          wrapClass: (path: NodePath<t.Class>) => NodePath;\n\n        if (!process.env.BABEL_8_BREAKING) {\n          if (isDecorated) {\n            staticNodes = pureStaticNodes = keysNodes = [];\n            ({ instanceNodes, wrapClass } = buildDecoratedClass(\n              ref,\n              path,\n              elements,\n              file,\n            ));\n          } else {\n            keysNodes = extractComputedKeys(path, computedPaths, file);\n            ({ staticNodes, pureStaticNodes, instanceNodes, wrapClass } =\n              buildFieldsInitNodes(\n                ref,\n                path.node.superClass,\n                props,\n                privateNamesMap,\n                file,\n                setPublicClassFields ?? loose,\n                privateFieldsAsSymbolsOrProperties ?? loose,\n                constantSuper ?? loose,\n                innerBinding,\n              ));\n          }\n        } else {\n          keysNodes = extractComputedKeys(path, computedPaths, file);\n          ({ staticNodes, pureStaticNodes, instanceNodes, wrapClass } =\n            buildFieldsInitNodes(\n              ref,\n              path.node.superClass,\n              props,\n              privateNamesMap,\n              file,\n              setPublicClassFields ?? loose,\n              privateFieldsAsSymbolsOrProperties ?? loose,\n              constantSuper ?? loose,\n              innerBinding,\n            ));\n        }\n\n        if (instanceNodes.length > 0) {\n          injectInitialization(\n            path,\n            constructor,\n            instanceNodes,\n            (referenceVisitor, state) => {\n              if (!process.env.BABEL_8_BREAKING) {\n                if (isDecorated) return;\n              }\n              for (const prop of props) {\n                // @ts-expect-error: TS doesn't infer that prop.node is not a StaticBlock\n                if (t.isStaticBlock?.(prop.node) || prop.node.static) continue;\n                prop.traverse(referenceVisitor, state);\n              }\n            },\n          );\n        }\n\n        // rename to make ts happy\n        const wrappedPath = wrapClass(path);\n        wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]);\n        if (staticNodes.length > 0) {\n          wrappedPath.insertAfter(staticNodes);\n        }\n        if (pureStaticNodes.length > 0) {\n          wrappedPath\n            .find(parent => parent.isStatement() || parent.isDeclaration())\n            .insertAfter(pureStaticNodes);\n        }\n      },\n\n      ExportDefaultDeclaration(path, { file }) {\n        if (!process.env.BABEL_8_BREAKING) {\n          if (file.get(versionKey) !== PACKAGE_JSON.version) return;\n\n          const decl = path.get(\"declaration\");\n\n          if (decl.isClassDeclaration() && hasDecorators(decl.node)) {\n            if (decl.node.id) {\n              // export default class Foo {}\n              //   -->\n              // class Foo {} export { Foo as default }\n              splitExportDeclaration(path);\n            } else {\n              // @ts-expect-error Anonymous class declarations can be\n              // transformed as if they were expressions\n              decl.node.type = \"ClassExpression\";\n            }\n          }\n        }\n      },\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"script"}