{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n}\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\nvar ParseErrorCode = {\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n};\nconst reflect = (keys, last = keys.length - 1) => ({\n  get() {\n    return keys.reduce((object, key) => object[key], this);\n  },\n  set(value) {\n    keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);\n  }\n});\nconst instantiate = (constructor, properties, descriptors) => Object.keys(descriptors).map(key => [key, descriptors[key]]).filter(([, descriptor]) => !!descriptor).map(([key, descriptor]) => [key, typeof descriptor === \"function\" ? {\n  value: descriptor,\n  enumerable: false\n} : typeof descriptor.reflect === \"string\" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split(\".\"))) : descriptor]).reduce((instance, [key, descriptor]) => Object.defineProperty(instance, key, Object.assign({\n  configurable: true\n}, descriptor)), Object.assign(new constructor(), properties));\nvar ModuleErrors = {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError\n  }\n};\nconst NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\nconst toNodeDescription = ({\n  type,\n  prefix\n}) => type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];\nvar StandardErrors = {\n  AccessorIsGenerator: ({\n    kind\n  }) => `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext: \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses: \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport: \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({\n    exportName\n  }) => `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName\n  }) => `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: ({\n    type\n  }) => `'${type === \"ForInStatement\" ? \"for-in\" : \"for-of\"}' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: ({\n    type\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert: \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: ({\n    importName\n  }) => `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({\n    maxArgumentCount\n  }) => `\\`import()\\` requires exactly ${maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"}.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault: \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding: 'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags: \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({\n    radix\n  }) => `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({\n    reservedWord\n  }) => `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({\n    identifierName\n  }) => `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({\n    ancestor\n  }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({\n    ancestor\n  }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({\n    unexpected\n  }) => `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({\n    labelName\n  }) => `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`,\n  MissingOneOfPlugins: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({\n    key\n  }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode\n  }) => `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(16)}'.`,\n  ModuleExportUndefined: ({\n    localName\n  }) => `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({\n    identifierName\n  }) => `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({\n    identifierName\n  }) => `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({\n    keyword\n  }) => `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({\n    reservedWord\n  }) => `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected\n  }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${expected ? `, expected \"${expected}\"` : \"\"}`,\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration: \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName\n  }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern: \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({\n    identifierName\n  }) => `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n};\nvar StrictModeErrors = {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: ({\n    referenceName\n  }) => `Assigning to '${referenceName}' in strict mode.`,\n  StrictEvalArgumentsBinding: ({\n    bindingName\n  }) => `Binding '${bindingName}' in strict mode.`,\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\"\n};\nconst UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\nvar PipelineOperatorErrors = {\n  PipeBodyIsTighter: \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({\n    token\n  }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({\n    type\n  }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n    type\n  })}; please wrap it in parentheses.`,\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'\n};\nconst _excluded$1 = [\"toMessage\"],\n  _excluded2$1 = [\"message\"];\nfunction toParseErrorConstructor(_ref) {\n  let {\n      toMessage\n    } = _ref,\n    properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n  return function constructor({\n    loc,\n    details\n  }) {\n    return instantiate(SyntaxError, Object.assign({}, properties, {\n      loc\n    }), {\n      clone(overrides = {}) {\n        const loc = overrides.loc || {};\n        return constructor({\n          loc: new Position(\"line\" in loc ? loc.line : this.loc.line, \"column\" in loc ? loc.column : this.loc.column, \"index\" in loc ? loc.index : this.loc.index),\n          details: Object.assign({}, this.details, overrides.details)\n        });\n      },\n      details: {\n        value: details,\n        enumerable: false\n      },\n      message: {\n        get() {\n          return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;\n        },\n        set(value) {\n          Object.defineProperty(this, \"message\", {\n            value\n          });\n        }\n      },\n      pos: {\n        reflect: \"loc.index\",\n        enumerable: true\n      },\n      missingPlugin: \"missingPlugin\" in details && {\n        reflect: \"details.missingPlugin\",\n        enumerable: true\n      }\n    });\n  };\n}\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n  const ParseErrorConstructors = {};\n  for (const reasonCode of Object.keys(argument)) {\n    const template = argument[reasonCode];\n    const _ref2 = typeof template === \"string\" ? {\n        message: () => template\n      } : typeof template === \"function\" ? {\n        message: template\n      } : template,\n      {\n        message\n      } = _ref2,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);\n    const toMessage = typeof message === \"string\" ? () => message : message;\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage\n    }, syntaxPlugin ? {\n      syntaxPlugin\n    } : {}, rest));\n  }\n  return ParseErrorConstructors;\n}\nconst Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));\nconst {\n  defineProperty\n} = Object;\nconst toUnenumerable = (object, key) => defineProperty(object, key, {\n  enumerable: false,\n  value: object[key]\n});\nfunction toESTreeLocation(node) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\nvar estree = superClass => class ESTreeParserMixin extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n    return file;\n  }\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n  parseBigIntLiteral(value) {\n    let bigInt;\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  directiveToStmt(directive) {\n    const expression = directive.value;\n    delete directive.value;\n    expression.type = \"Literal\";\n    expression.raw = expression.extra.raw;\n    expression.value = expression.extra.expressionValue;\n    const stmt = directive;\n    stmt.type = \"ExpressionStatement\";\n    stmt.expression = expression;\n    stmt.directive = expression.extra.rawValue;\n    delete expression.extra;\n    return stmt;\n  }\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n    classBody.body.push(method);\n  }\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n    return this.finishNode(node, \"MethodDefinition\");\n  }\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") {\n        node.kind = \"init\";\n      }\n      node.shorthand = false;\n    }\n    return node;\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n    return node;\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return type === \"Property\" ? \"value\" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n    return super.isAssignable(node, isBinding);\n  }\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n      this.toAssignable(value, isLHS);\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(Errors.PatternHasAccessor, {\n        at: prop.key\n      });\n    } else if (prop.method) {\n      this.raise(Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n    }\n  }\n  finishCallExpression(unfinished, optional) {\n    const node = super.finishCallExpression(unfinished, optional);\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n      delete node.arguments;\n      delete node.callee;\n    }\n    return node;\n  }\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n    super.toReferencedArguments(node);\n  }\n  parseExport(unfinished, decorators) {\n    const exportStartLoc = this.state.lastTokStartLoc;\n    const node = super.parseExport(unfinished, decorators);\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n      case \"ExportDefaultDeclaration\":\n        {\n          var _declaration$decorato;\n          const {\n            declaration\n          } = node;\n          if ((declaration == null ? void 0 : declaration.type) === \"ClassDeclaration\" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {\n            this.resetStartLocation(node, exportStartLoc);\n          }\n        }\n        break;\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startLoc, noCalls, state);\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n    return node;\n  }\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n    return super.hasPropertyAsPrivateName(node);\n  }\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n  resetStartLocation(node, startLoc) {\n    super.resetStartLocation(node, startLoc);\n    toESTreeLocation(node);\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n};\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass ExportedTokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n}\nconst keywords$1 = new Map();\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\nfunction createToken(name, options = {}) {\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\nfunction createKeywordLike(name, options = {}) {\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _using: createKeywordLike(\"using\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _satisfies: createKeywordLike(\"satisfies\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 130;\n}\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 130;\n}\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 134;\n}\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 127 && token <= 129;\n}\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 119 && token <= 121;\n}\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 122 && token <= 128;\n}\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n  tokenTypes[140].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\nconst SCOPE_OTHER = 0b000000000,\n  SCOPE_PROGRAM = 0b000000001,\n  SCOPE_FUNCTION = 0b000000010,\n  SCOPE_ARROW = 0b000000100,\n  SCOPE_SIMPLE_CATCH = 0b000001000,\n  SCOPE_SUPER = 0b000010000,\n  SCOPE_DIRECT_SUPER = 0b000100000,\n  SCOPE_CLASS = 0b001000000,\n  SCOPE_STATIC_BLOCK = 0b010000000,\n  SCOPE_TS_MODULE = 0b100000000,\n  SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b0000000000001,\n  BIND_KIND_TYPE = 0b0000000000010,\n  BIND_SCOPE_VAR = 0b0000000000100,\n  BIND_SCOPE_LEXICAL = 0b0000000001000,\n  BIND_SCOPE_FUNCTION = 0b0000000010000,\n  BIND_FLAGS_NONE = 0b00000001000000,\n  BIND_FLAGS_CLASS = 0b00000010000000,\n  BIND_FLAGS_TS_ENUM = 0b00000100000000,\n  BIND_FLAGS_TS_CONST_ENUM = 0b00001000000000,\n  BIND_FLAGS_TS_EXPORT_ONLY = 0b00010000000000,\n  BIND_FLAGS_FLOW_DECLARE_FN = 0b00100000000000,\n  BIND_FLAGS_TS_IMPORT = 0b01000000000000,\n  BIND_FLAGS_NO_LET_IN_LEXICAL = 0b10000000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS | BIND_FLAGS_NO_LET_IN_LEXICAL,\n  BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | BIND_FLAGS_NO_LET_IN_LEXICAL,\n  BIND_CATCH_PARAM = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n  BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n  BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n  BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n  BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n  BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM | BIND_FLAGS_NO_LET_IN_LEXICAL,\n  BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n  BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n  BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n  BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_TS_TYPE_IMPORT = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_TS_IMPORT,\n  BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n  CLASS_ELEMENT_KIND_GETTER = 0b010,\n  CLASS_ELEMENT_KIND_SETTER = 0b001,\n  CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n  CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n  CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n  CLASS_ELEMENT_OTHER = 0;\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n}\nclass ScopeHandler {\n  constructor(parser, inModule) {\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n  createScope(flags) {\n    return new Scope(flags);\n  }\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n  exit() {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  maybeExportDefined(scope, name) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n}\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n    return false;\n  }\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n}\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n    const {\n      start: nodeStart\n    } = node;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        break;\n      }\n    }\n  }\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n  resetPreviousIdentifierLeadingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n    default:\n      return false;\n  }\n}\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.inDisallowConditionalTypesContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 137;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.firstInvalidTemplateEscapePos = null;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n  init({\n    strictMode,\n    sourceType,\n    startLine,\n    startColumn\n  }) {\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n      state[key] = val;\n    }\n    return state;\n  }\n}\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(input, pos, lineStart, curLine, type === \"template\", errors);\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = {\n          pos,\n          lineStart,\n          curLine\n        };\n      } else {\n        out += res.ch;\n      }\n      ({\n        pos,\n        lineStart,\n        curLine\n      } = res);\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n    containsInvalid: !!firstInvalidLoc\n  };\n}\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === \"template\") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n  return ch === (type === \"double\" ? 34 : 39);\n}\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case 110:\n      return res(\"\\n\");\n    case 114:\n      return res(\"\\r\");\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n    case 116:\n      return res(\"\\t\");\n    case 98:\n      return res(\"\\b\");\n    case 118:\n      return res(\"\\u000b\");\n    case 102:\n      return res(\"\\f\");\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n    case 10:\n      lineStart = pos;\n      ++curLine;\n    case 8232:\n    case 8233:\n      return res(\"\");\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (octalStr !== \"0\" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n        return res(String.fromCharCode(octal));\n      }\n      return res(String.fromCharCode(ch));\n  }\n}\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return {\n    code: n,\n    pos\n  };\n}\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n    if (code === 95 && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n      if (!allowNumSeparator) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n      ++pos;\n      continue;\n    }\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      if (val <= 9 && bailOnError) {\n        return {\n          n: null,\n          pos\n        };\n      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n  return {\n    n: total,\n    pos\n  };\n}\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf(\"}\", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n  return {\n    code,\n    pos\n  };\n}\nconst _excluded = [\"at\"],\n  _excluded2 = [\"at\"];\nfunction buildPosition(pos, lineStart, curLine) {\n  return new Position(curLine, pos - lineStart, pos);\n}\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n}\nclass Tokenizer extends CommentsParser {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.errorHandlers_readInt = {\n      invalidDigit: (pos, lineStart, curLine, radix) => {\n        if (!this.options.errorRecovery) return false;\n        this.raise(Errors.InvalidDigit, {\n          at: buildPosition(pos, lineStart, curLine),\n          radix\n        });\n        return true;\n      },\n      numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),\n      unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)\n    };\n    this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {\n      invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n      invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)\n    });\n    this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: (pos, lineStart, curLine) => {\n        this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      },\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedString, {\n          at: buildPosition(pos - 1, lineStart, curLine)\n        });\n      }\n    });\n    this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      }\n    });\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n  next() {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  match(type) {\n    return this.state.type === type;\n  }\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n  nextTokenInLineStart() {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n  nextTokenInLineStartSince(pos) {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;\n  }\n  lookaheadInLineCharCode() {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (strict) {\n      this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, {\n        at\n      }));\n      this.state.strictErrors.clear();\n    }\n  }\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(137);\n      return;\n    }\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n  skipBlockComment(commentEnd) {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment(\"*/\");\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            default:\n              break loop;\n          }\n          break;\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule && this.options.annexB) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule && this.options.annexB) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= 48 && next <= 57) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition()\n      });\n    }\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {\n          at: this.state.curPosition()\n        });\n      }\n      this.state.pos += 2;\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(136, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(136, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n    this.finishOp(type, width);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n      return;\n    }\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === 94) {\n        this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n      this.finishOp(51, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(47, 1);\n  }\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n      this.finishOp(52, size);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(48, 1);\n  }\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n        return;\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n        return;\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n        return;\n      case 63:\n        this.readToken_question();\n        return;\n      case 96:\n        this.readTemplateToken();\n        return;\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n      case 47:\n        this.readToken_slash();\n        return;\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n      case 94:\n        this.readToken_caret();\n        return;\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n      case 60:\n        this.readToken_lt();\n        return;\n      case 62:\n        this.readToken_gt();\n        return;\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n      case 126:\n        this.finishOp(36, 1);\n        return;\n      case 64:\n        this.readToken_atSign();\n        return;\n      case 35:\n        this.readToken_numberSign();\n        return;\n      case 92:\n        this.readWord();\n        return;\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code)\n    });\n  }\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n        escaped = ch === 92;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, {\n            at: nextPos()\n          });\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(Errors.MalformedRegExpFlags, {\n          at: nextPos()\n        });\n      } else {\n        break;\n      }\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n    this.finishToken(135, {\n      pattern: content,\n      flags: mods\n    });\n  }\n  readInt(radix, len, forceLen = false, allowNumSeparator = true) {\n    const {\n      n,\n      pos\n    } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);\n    this.state.pos = pos;\n    return n;\n  }\n  readRadixNumber(radix) {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(Errors.InvalidDecimal, {\n        at: startLoc\n      });\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n    if (isBigInt) {\n      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(133, str);\n      return;\n    }\n    this.finishToken(132, val);\n  }\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, {\n        at: this.state.curPosition()\n      });\n    }\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, {\n        at: startLoc\n      });\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos)\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, {\n          at: startLoc\n        });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, {\n          at: startLoc\n        });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n    if (isBigInt) {\n      this.finishToken(133, str);\n      return;\n    }\n    if (isDecimal) {\n      this.finishToken(134, str);\n      return;\n    }\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(132, val);\n  }\n  readCodePoint(throwOnInvalid) {\n    const {\n      code,\n      pos\n    } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);\n    this.state.pos = pos;\n    return code;\n  }\n  readString(quote) {\n    const {\n      str,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(quote === 34 ? \"double\" : \"single\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(131, str);\n  }\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n  readTemplateToken() {\n    const opening = this.input[this.state.pos];\n    const {\n      str,\n      firstInvalidLoc,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(\"template\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);\n    }\n    if (this.input.codePointAt(pos) === 96) {\n      this.finishToken(24, firstInvalidLoc ? null : opening + str + \"`\");\n    } else {\n      this.state.pos++;\n      this.finishToken(25, firstInvalidLoc ? null : opening + str + \"${\");\n    }\n  }\n  recordStrictModeErrors(toParseError, {\n    at\n  }) {\n    const index = at.index;\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, {\n        at\n      });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition()\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, {\n              at: escStart\n            });\n          }\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(130, word);\n    }\n  }\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type)\n      });\n    }\n  }\n  raise(toParseError, raiseProperties) {\n    const {\n        at\n      } = raiseProperties,\n      details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({\n      loc,\n      details\n    });\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n    return error;\n  }\n  raiseOverwrite(toParseError, raiseProperties) {\n    const {\n        at\n      } = raiseProperties,\n      details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return errors[i] = toParseError({\n          loc,\n          details\n        });\n      }\n      if (error.loc.index < pos) break;\n    }\n    return this.raise(toParseError, raiseProperties);\n  }\n  updateContext(prevType) {}\n  unexpected(loc, type) {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc\n    });\n  }\n  expectPlugin(pluginName, loc) {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName]\n    });\n  }\n  expectOnePlugin(pluginNames) {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames\n      });\n    }\n  }\n  errorBuilder(error) {\n    return (pos, lineStart, curLine) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine)\n      });\n    };\n  }\n}\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n}\nclass ClassScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n  usePrivateName(name, loc) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n}\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.declarationErrors = new Map();\n  }\n  recordDeclarationError(ParsingErrorClass, {\n    at\n  }) {\n    const index = at.index;\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(iterator) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\nclass ExpressionScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n  enter(scope) {\n    this.stack.push(scope);\n  }\n  exit() {\n    this.stack.pop();\n  }\n  recordParameterInitializerError(toParseError, {\n    at: node\n  }) {\n    const origin = {\n      at: node.loc.start\n    };\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n  recordArrowParameterBindingError(error, {\n    at: node\n  }) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n    const origin = {\n      at: node.loc.start\n    };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n  recordAsyncArrowParametersError({\n    at\n  }) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {\n          at\n        });\n      }\n      scope = stack[--i];\n    }\n  }\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, {\n        at: loc\n      });\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\nconst PARAM = 0b0000,\n  PARAM_YIELD = 0b0001,\n  PARAM_AWAIT = 0b0010,\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n  exit() {\n    this.stacks.pop();\n  }\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value, enumerable = true) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n    return false;\n  }\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  expectContextual(token, toParseError) {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, {\n          at: this.state.startLoc\n        });\n      }\n      this.unexpected(null, token);\n    }\n  }\n  canInsertSemicolon() {\n    return this.match(137) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n  }\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(Errors.MissingSemicolon, {\n      at: this.state.lastTokEndLoc\n    });\n  }\n  expect(type, loc) {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n      throw error;\n    }\n  }\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n    if (!andThrow) {\n      return hasErrors;\n    }\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc\n      });\n    }\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, {\n        at: doubleProtoLoc\n      });\n    }\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, {\n        at: privateKeyLoc\n      });\n    }\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n}\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n}\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n    return newNode;\n  };\n}\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n  startNodeAt(loc) {\n    return new Node(this, loc.index, loc);\n  }\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.loc.start);\n  }\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n  resetStartLocation(node, startLoc) {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: ({\n    reservedType\n  }) => `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName\n  }) => `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName\n  }) => `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({\n    enumName\n  }) => `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName\n  }) => `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName\n  }) => `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType\n  }) => `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName\n  }) => `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName\n  }) => `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion\n  }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName\n  }) => `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName\n  }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: Object.assign({\n    message: \"A binding pattern parameter cannot be optional in an implementation signature.\"\n  }, {\n    reasonCode: \"OptionalBindingPattern\"\n  }),\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({\n    reservedType\n  }) => `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion\n  }) => `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n});\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = superClass => class FlowParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n  finishToken(type, val) {\n    if (type !== 131 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n    super.finishToken(type, val);\n  }\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n    super.addComment(comment);\n  }\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(108);\n    if (this.state.lastTokStart > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n        at: moduloLoc\n      });\n    }\n    if (this.eat(10)) {\n      node.value = super.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n    return [type, predicate];\n  }\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(125)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(128)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(129)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(127)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      this.unexpected();\n    }\n  }\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n    if (this.match(131)) {\n      node.id = super.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n      if (this.match(83)) {\n        this.next();\n        if (!this.isContextual(128) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        super.parseImport(bodyNode);\n      } else {\n        this.expectContextual(123, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n      body.push(bodyNode);\n    }\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n            at: bodyElement\n          });\n        }\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(128) || this.isContextual(127)) && !insideModule) {\n        const label = this.state.value;\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n          at: this.state.startLoc,\n          unsupportedExportKind: label,\n          suggestion: exportSuggestions[label]\n        });\n      }\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(129)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(127) || this.isContextual(128) || this.isContextual(129)) {\n        node = this.parseExport(node, null);\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n    this.unexpected();\n  }\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(109);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    const finished = this.flowParseTypeAlias(node);\n    finished.type = \"DeclareTypeAlias\";\n    return finished;\n  }\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    const finished = this.flowParseOpaqueType(node, true);\n    finished.type = \"DeclareOpaqueType\";\n    return finished;\n  }\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n  flowParseInterfaceish(node, isClass) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n    if (isClass) {\n      node.implements = [];\n      node.mixins = [];\n      if (this.eatContextual(115)) {\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n      if (this.eatContextual(111)) {\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n        at: this.state.startLoc\n      });\n    }\n  }\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n      at: startLoc,\n      reservedType: word\n    });\n  }\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(128);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.supertype = null;\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n    node.impltype = null;\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, {\n          at: nodeStartLoc\n        });\n      }\n    }\n    return this.finishNode(node, \"TypeParameter\");\n  }\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n    if (this.match(47) || this.match(140)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    let defaultRequired = false;\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(127);\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n  flowParseObjectPropertyKey() {\n    return this.match(132) || this.match(131) ? super.parseExprAtom() : this.parseIdentifier(true);\n  }\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n    } else {\n      node.method = false;\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n      node.value = this.flowParseTypeInitialiser();\n    }\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    this.expect(10);\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n    nodeStart.exact = exact;\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n      if (allowProto && this.isContextual(116)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n      if (allowStatic && this.isContextual(104)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n      const variance = this.flowParseVariance();\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n        if (this.isContextual(98) || this.isContextual(103)) {\n          const lookahead = this.lookahead();\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n      this.flowObjectTypeSemicolon();\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n          at: inexactStartLoc\n        });\n      }\n    }\n    this.expect(endDelim);\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, {\n            at: this.state.lastTokStartLoc\n          });\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, {\n            at: variance\n          });\n        }\n        return null;\n      }\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, {\n          at: this.state.lastTokStartLoc\n        });\n      }\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, {\n          at: variance\n        });\n      }\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, {\n            at: node.value.this\n          });\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n        if (this.eat(17)) {\n          optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n        at: property.value.this\n      });\n    }\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: property\n      });\n    }\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: property\n      });\n    }\n  }\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n  flowParseQualifiedTypeIdentifier(startLoc, id) {\n    var _startLoc;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n    return node;\n  }\n  flowParseGenericType(startLoc, id) {\n    const node = this.startNodeAt(startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node\n        });\n      }\n      name = this.parseIdentifier(isThis);\n      if (this.eat(17)) {\n        optional = true;\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n            at: node\n          });\n        }\n      }\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n  flowIdentToTypeAnnotation(startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startLoc, id);\n    }\n  }\n  flowParsePrimaryType() {\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n      case 47:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      case 10:\n        this.next();\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      case 131:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n          if (this.match(132)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n          if (this.match(133)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n            at: this.state.startLoc\n          });\n        }\n        this.unexpected();\n        return;\n      case 132:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n      case 133:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n      case 87:\n        return this.flowParseTypeofType();\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(127)) {\n            return this.flowParseInterfaceType();\n          }\n          return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());\n        }\n    }\n    this.unexpected();\n  }\n  flowParsePostfixType() {\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n    return type;\n  }\n  flowParsePrefixType() {\n    const node = this.startNode();\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n    return param;\n  }\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 130 && this.state.value === \"_\") {\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n    return ident;\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  flowParseVariance() {\n    let variance = null;\n    if (this.match(53)) {\n      variance = this.startNode();\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n      this.next();\n      return this.finishNode(variance, \"Variance\");\n    }\n    return variance;\n  }\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      return;\n    }\n    super.parseFunctionBody(node, false, isMethod);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  parseStatementLike(flags) {\n    if (this.state.strict && this.isContextual(127)) {\n      const lookahead = this.lookahead();\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(124)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    const stmt = super.parseStatementLike(flags);\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n    return stmt;\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n    return super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {\n      return !this.state.containsEsc;\n    }\n    return super.shouldParseExportDeclaration();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {\n      return this.state.containsEsc;\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(124)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, {\n          at: state.startLoc\n        });\n      }\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n    while (stack.length !== 0) {\n      const node = stack.pop();\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n  finishArrowValidation(node) {\n    var _node$extra;\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n    return result;\n  }\n  parseParenItem(node, startLoc) {\n    node = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n    return node;\n  }\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n    super.assertModuleNodeAllowed(node);\n  }\n  parseExportDeclaration(node) {\n    if (this.isContextual(128)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        super.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(129)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(127)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(124)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n  eatExportStar(node) {\n    if (super.eatExportStar(node)) return true;\n    if (this.isContextual(128) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n    return hasNamespace;\n  }\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n    if (this.isContextual(123)) {\n      if (super.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      member.declare = true;\n    }\n    super.parseClassMember(classBody, member, state);\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, {\n          at: startLoc\n        });\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, {\n          at: member.value\n        });\n      }\n    }\n  }\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(Errors.InvalidIdentifier, {\n        at: this.state.curPosition(),\n        identifierName: fullWord\n      });\n    }\n    this.finishToken(130, fullWord);\n  }\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 123 && next === 124) {\n      this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        this.finishOp(18, 2);\n      } else {\n        this.finishOp(17, 1);\n      }\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      this.readIterator();\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    if (!isLHS && node.type === \"AssignmentExpression\" && node.left.type === \"TypeCastExpression\") {\n      node.left = this.typeCastToParameter(node.left);\n    }\n    super.toAssignable(node, isLHS);\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n      const expr = exprList[i];\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, {\n          at: expr.typeAnnotation\n        });\n      }\n    }\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n    return node;\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"TypeCastExpression\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassPrivateProperty(node);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    if (method.params && isConstructor) {\n      const params = method.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    }\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    if (this.isContextual(111)) {\n      this.next();\n      const implemented = node.implements = [];\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length > 0) {\n      const param = params[0];\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n          at: param\n        });\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n          at: param\n        });\n      }\n    }\n  }\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n    delete prop.variance;\n    let typeParameters;\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n    const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    if (typeParameters) {\n      (result.value || result).typeParameters = typeParameters;\n    }\n    return result;\n  }\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n          at: param\n        });\n      }\n      param.optional = true;\n    }\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, {\n        at: param\n      });\n    }\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, {\n        at: param\n      });\n    }\n    this.resetEndLocation(param);\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, {\n        at: node.typeAnnotation\n      });\n    }\n    return node;\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(FlowErrors.ImportReflectionHasImportType, {\n        at: node.specifiers[0].loc.start\n      });\n    }\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(128)) {\n      if (!isExport) return true;\n      const ch = this.lookaheadCharCode();\n      return ch === 123 || ch === 42;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      if (!phase && this.match(65)) {\n        return;\n      }\n      node.exportKind = phase === \"type\" ? phase : \"value\";\n    } else {\n      if (phase === \"type\" && this.match(55)) this.unexpected();\n      node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n    let isBinding = false;\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, {\n            at: specifier,\n            importName: firstIdent.value\n          });\n        }\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n        at: specifier\n      });\n    }\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n  parseFunctionParams(node, isConstructor) {\n    const kind = node.kind;\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n    let state = null;\n    let jsx;\n    if (this.hasPlugin(\"jsx\") && (this.match(140) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n              at: typeParameters\n            });\n          }\n          return arrow.node;\n        }\n        arrowExpression = arrow.node;\n      }\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n        at: typeParameters\n      });\n    }\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n    return super.parseArrow(node);\n  }\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node.params[i]\n        });\n      }\n    }\n    super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.arguments = super.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n      throw arrow.error || result.error;\n    }\n    return super.parseSubscripts(base, startLoc, noCalls);\n  }\n  parseSubscript(base, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = super.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) {\n          node.optional = false;\n        }\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, subscriptState);\n  }\n  parseNewCallee(node) {\n    super.parseNewCallee(node);\n    let targs = null;\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n    node.typeArguments = targs;\n  }\n  parseAsyncArrowWithTypeParameters(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.parseFunctionParams(node, false);\n    if (!this.parseArrow(node)) return;\n    return super.parseArrowExpression(node, undefined, true);\n  }\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n    super.readToken_mult_modulo(code);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n    super.readToken_pipe_amp(code);\n  }\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, {\n        at: this.state.curPosition()\n      });\n    }\n    return fileNode;\n  }\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, {\n          at: this.state.startLoc\n        });\n      }\n      this.hasFlowCommentCompletion();\n      const commentSkip = this.skipFlowComment();\n      if (commentSkip) {\n        this.state.pos += commentSkip;\n        this.state.hasFlowComment = true;\n      }\n      return;\n    }\n    return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n  }\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n    return false;\n  }\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n  }\n  flowEnumErrorBooleanMemberNotInitialized(loc, {\n    enumName,\n    memberName\n  }) {\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n      at: loc,\n      memberName,\n      enumName\n    });\n  }\n  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({\n      at: loc\n    }, enumContext));\n  }\n  flowEnumErrorNumberMemberNotInitialized(loc, {\n    enumName,\n    memberName\n  }) {\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n      at: loc,\n      enumName,\n      memberName\n    });\n  }\n  flowEnumErrorStringMemberInconsistentlyInitailized(node, {\n    enumName\n  }) {\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n      at: node,\n      enumName\n    });\n  }\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n    const endOfInit = () => this.match(12) || this.match(8);\n    switch (this.state.type) {\n      case 132:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 131:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n    if (explicitType === null) {\n      return;\n    }\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n      if (memberName === \"\") {\n        continue;\n      }\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, {\n          at: id,\n          memberName,\n          suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n          enumName\n        });\n      }\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, {\n          at: id,\n          memberName,\n          enumName\n        });\n      }\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n      return initializedMembers;\n    }\n  }\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (!this.eatContextual(101)) return null;\n    if (!tokenIsIdentifier(this.state.type)) {\n      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n        at: this.state.startLoc,\n        enumName\n      });\n    }\n    const {\n      value\n    } = this.state;\n    this.next();\n    if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n      this.raise(FlowErrors.EnumInvalidExplicitType, {\n        at: this.state.startLoc,\n        enumName,\n        invalidEnumType: value\n      });\n    }\n    return value;\n  }\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n    return false;\n  }\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n};\nconst entities = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({\n    openingTagName\n  }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity\n  }) => `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\nvar jsx = superClass => class JSXParserMixin extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, {\n          at: this.state.startLoc\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              this.finishToken(140);\n            } else {\n              super.getTokenFromCode(ch);\n            }\n            return;\n          }\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(139, out);\n          return;\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n      }\n    }\n  }\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(131, out);\n  }\n  jsxReadEntity() {\n    const startPos = ++this.state.pos;\n    if (this.codePointAtPos(this.state.pos) === 35) {\n      ++this.state.pos;\n      let radix = 10;\n      if (this.codePointAtPos(this.state.pos) === 120) {\n        radix = 16;\n        ++this.state.pos;\n      }\n      const codePoint = this.readInt(radix, undefined, false, \"bail\");\n      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n        ++this.state.pos;\n        return String.fromCodePoint(codePoint);\n      }\n    } else {\n      let count = 0;\n      let semi = false;\n      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {\n        ++this.state.pos;\n      }\n      if (semi) {\n        const desc = this.input.slice(startPos, this.state.pos);\n        const entity = entities[desc];\n        ++this.state.pos;\n        if (entity) {\n          return entity;\n        }\n      }\n    }\n    this.state.pos = startPos;\n    return \"&\";\n  }\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n    this.finishToken(138, this.input.slice(start, this.state.pos));\n  }\n  jsxParseIdentifier() {\n    const node = this.startNode();\n    if (this.match(138)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n  jsxParseNamespacedName() {\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n  jsxParseElementName() {\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n    return node;\n  }\n  jsxParseAttributeValue() {\n    let node;\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, {\n            at: node\n          });\n        }\n        return node;\n      case 140:\n      case 131:\n        return this.parseExprAtom();\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, {\n          at: this.state.startLoc\n        });\n    }\n  }\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_expr);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n    this.setContext(previousContext);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n  jsxParseAttribute() {\n    const node = this.startNode();\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n  jsxParseOpeningElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(141)) {\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n    while (!this.match(56) && !this.match(141)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(141);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n  jsxParseClosingElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(141)) {\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    this.expect(141);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n  jsxParseElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startLoc);\n    let closingElement = null;\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 140:\n            startLoc = this.state.startLoc;\n            this.next();\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startLoc);\n              break contents;\n            }\n            children.push(this.jsxParseElementAt(startLoc));\n            break;\n          case 139:\n            children.push(this.parseExprAtom());\n            break;\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n              break;\n            }\n          default:\n            this.unexpected();\n        }\n      }\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, {\n          at: closingElement\n        });\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, {\n          at: closingElement,\n          openingTagName: getQualifiedJSXName(openingElement.name)\n        });\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name)\n          });\n        }\n      }\n    }\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n    node.children = children;\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n        at: this.state.startLoc\n      });\n    }\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n  jsxParseElement() {\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startLoc);\n  }\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(139)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(140)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(140);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n  getTokenFromCode(code) {\n    const context = this.curContext();\n    if (context === types.j_expr) {\n      this.jsxReadToken();\n      return;\n    }\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        this.jsxReadWord();\n        return;\n      }\n      if (code === 62) {\n        ++this.state.pos;\n        this.finishToken(141);\n        return;\n      }\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        this.jsxReadString(code);\n        return;\n      }\n    }\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      this.finishToken(140);\n      return;\n    }\n    super.getTokenFromCode(code);\n  }\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n    if (type === 56 && prevType === 140) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 140) {\n      context.push(types.j_oTag);\n    } else if (type === 141) {\n      const out = context[context.length - 1];\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n};\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n}\nclass TypeScriptScopeHandler extends ScopeHandler {\n  constructor(...args) {\n    super(...args);\n    this.importsStack = [];\n  }\n  createScope(flags) {\n    this.importsStack.push(new Set());\n    return new TypeScriptScope(flags);\n  }\n  enter(flags) {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n    super.enter(flags);\n  }\n  exit() {\n    const flags = super.exit();\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n    return flags;\n  }\n  hasImport(name, allowShadow) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n  declareName(name, bindingType, loc) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    if (this.hasImport(name)) return;\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n    super.checkLocalExport(id);\n  }\n}\nconst getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, {\n          at: node\n        });\n      }\n    }\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc\n            });\n          }\n        }\n        break;\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n          this.toAssignable(value, isLHS);\n          break;\n        }\n      case \"SpreadElement\":\n        {\n          throw new Error(\"Internal @babel/parser error (this is a bug, please report it).\" + \" SpreadElement should be converted by .toAssignable's caller.\");\n        }\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, {\n            at: node.left.loc.end\n          });\n        }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, false);\n      this.toAssignable(arg, isLHS);\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, {\n          at: prop\n        });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    const end = exprList.length - 1;\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, {\n            at: elt\n          });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, {\n            at: trailingCommaLoc\n          });\n        }\n      }\n    }\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n      default:\n        return false;\n    }\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n  parseSpread(refExpressionErrors) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, 1);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n    return this.parseIdentifier();\n  }\n  parseBindingList(close, closeCharCode, flags) {\n    const allowEmpty = flags & 1;\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc\n          });\n        }\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      startLoc\n    } = this.state;\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === 136) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(prop, startLoc, false, false, true, false);\n  }\n  parseAssignableListItem(flags, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  parseAssignableListItemTypes(param, flags) {\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    var _startLoc, _left;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn$1({\n      AssignmentPattern: \"left\",\n      RestElement: \"argument\",\n      ObjectProperty: \"value\",\n      ParenthesizedExpression: \"expression\",\n      ArrayPattern: \"elements\",\n      ObjectPattern: \"properties\"\n    }, type);\n  }\n  checkLVal(expression, {\n    in: ancestor,\n    binding = BIND_NONE,\n    checkClashes = false,\n    strictModeChanged = false,\n    hasParenthesizedAncestor = false\n  }) {\n    var _expression$extra;\n    const type = expression.type;\n    if (this.isObjectMethod(expression)) return;\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, {\n          at: expression\n        });\n      }\n      return;\n    }\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n      const {\n        name\n      } = expression;\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, {\n            at: expression\n          });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n      return;\n    }\n    const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === \"AssignmentExpression\", binding);\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor\n      });\n      return;\n    }\n    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor = type === \"ArrayPattern\" || type === \"ObjectPattern\" || type === \"ParenthesizedExpression\" ? {\n      type\n    } : ancestor;\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression\n        });\n      }\n    }\n  }\n  checkIdentifier(at, bindingType, strictModeChanged = false) {\n    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, {\n          at,\n          referenceName: at.name\n        });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name\n        });\n      }\n    }\n    if (bindingType & BIND_FLAGS_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, {\n        at\n      });\n    }\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n  declareNameFromIdentifier(identifier, binding) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, {\n          at: node\n        });\n    }\n  }\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {\n      at: this.state.startLoc\n    });\n    return true;\n  }\n}\nconst getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({\n    methodName\n  }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName\n  }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional: \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({\n    kind\n  }) => `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: ({\n    modifier\n  }) => `Accessibility modifier already seen.`,\n  DuplicateModifier: ({\n    modifier\n  }) => `Duplicate modifier: '${modifier}'.`,\n  EmptyHeritageClauseType: ({\n    token\n  }) => `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers\n  }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier\n  }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext: \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({\n    modifier\n  }) => `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({\n    modifier\n  }) => `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier\n  }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers\n  }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression: \"Invalid property access after an instantiation expression. \" + \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier\n  }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName\n  }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType: \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({\n    type\n  }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`\n});\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\nfunction tsIsVarianceAnnotations(modifier) {\n  return modifier === \"in\" || modifier === \"out\";\n}\nvar typescript = superClass => class TypeScriptParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\"const\", \"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n    this.tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    });\n    this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n  }\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(136) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {\n      return undefined;\n    }\n    const modifier = this.state.value;\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n    return undefined;\n  }\n  tsParseModifiers({\n    allowedModifiers,\n    disallowedModifiers,\n    stopOnStartOfClassStaticBlock,\n    errorTemplate = TSErrors.InvalidModifierOnTypeMember\n  }, modified) {\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, {\n          at: loc,\n          orderedModifiers: [before, after]\n        });\n      }\n    };\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, {\n          at: loc,\n          modifiers: [mod1, mod2]\n        });\n      }\n    };\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else if (tsIsVarianceAnnotations(modifier)) {\n        if (modified[modifier]) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        }\n        modified[modifier] = true;\n        enforceOrder(startLoc, modifier, \"in\", \"out\");\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n        modified[modifier] = true;\n      }\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(errorTemplate, {\n          at: startLoc,\n          modifier\n        });\n      }\n    }\n  }\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n      case \"HeritageClauseElement\":\n        return this.match(5);\n      case \"TupleElementTypes\":\n        return this.match(3);\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n  }\n  tsParseList(kind, parseElement) {\n    const result = [];\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n    return result;\n  }\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      trailingCommaPos = -1;\n      const element = parseElement();\n      if (element == null) {\n        return undefined;\n      }\n      result.push(element);\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      if (expectSuccess) {\n        this.expect(12);\n      }\n      return undefined;\n    }\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n    return result;\n  }\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n    return result;\n  }\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n    if (!this.match(131)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, {\n        at: this.state.startLoc\n      });\n    }\n    node.argument = super.parseExprAtom();\n    this.expect(11);\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName();\n    }\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSImportType\");\n  }\n  tsParseEntityName(allowReservedWords = true) {\n    let entity = this.parseIdentifier(allowReservedWords);\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n    return entity;\n  }\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName();\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName();\n    }\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n  tsParseTypeParameter(parseModifiers) {\n    const node = this.startNode();\n    parseModifiers(node);\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n  tsTryParseTypeParameters(parseModifiers) {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters(parseModifiers);\n    }\n  }\n  tsParseTypeParameters(parseModifiers) {\n    const node = this.startNode();\n    if (this.match(47) || this.match(140)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, {\n        at: node\n      });\n    }\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n  tsParseBindingListForSignature() {\n    const list = super.parseBindingList(11, 41, 2);\n    for (const pattern of list) {\n      const {\n        type\n      } = pattern;\n      if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n          at: pattern,\n          type\n        });\n      }\n    }\n    return list;\n  }\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n    return false;\n  }\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return;\n    }\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, {\n          at: node\n        });\n      }\n      const method = nodeAny;\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n          at: this.state.curPosition()\n        });\n      }\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(Errors.BadGetterArity, {\n            at: this.state.curPosition()\n          });\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(Errors.BadSetterArity, {\n            at: this.state.curPosition()\n          });\n        } else {\n          const firstParameter = method[paramsKey][0];\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n              at: this.state.curPosition()\n            });\n          }\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n            at: method[returnTypeKey]\n          });\n        }\n      } else {\n        method.kind = \"method\";\n      }\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n  tsParseTypeMember() {\n    const node = this.startNode();\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n    this.tsParseModifiers({\n      allowedModifiers: [\"readonly\"],\n      disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n    }, node);\n    const idx = this.tsTryParseIndexSignature(node);\n    if (idx) {\n      return idx;\n    }\n    super.parsePropertyName(node);\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      super.parsePropertyName(node);\n    }\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n  tsIsStartOfMappedType() {\n    this.next();\n    if (this.eat(53)) {\n      return this.isContextual(120);\n    }\n    if (this.isContextual(120)) {\n      this.next();\n    }\n    if (!this.match(0)) {\n      return false;\n    }\n    this.next();\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n    this.next();\n    return this.match(58);\n  }\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(58);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(120);\n    } else if (this.eatContextual(120)) {\n      node.readonly = true;\n    }\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n      const {\n        type\n      } = elementNode;\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, {\n          at: elementNode\n        });\n      }\n      seenOptionalElement || (seenOptionalElement = type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\");\n      let checkType = type;\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        checkType = elementNode.type;\n      }\n      const isLabeled = checkType === \"TSNamedTupleMember\";\n      (_labeledElements = labeledElements) != null ? _labeledElements : labeledElements = isLabeled;\n      if (labeledElements !== isLabeled) {\n        this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n          at: elementNode\n        });\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n  tsParseTupleElementType() {\n    const {\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let labeled;\n    let label;\n    let optional;\n    let type;\n    const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n    const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n    if (chAfterWord === 58) {\n      labeled = true;\n      optional = false;\n      label = this.parseIdentifier(true);\n      this.expect(14);\n      type = this.tsParseType();\n    } else if (chAfterWord === 63) {\n      optional = true;\n      const startLoc = this.state.startLoc;\n      const wordName = this.state.value;\n      const typeOrLabel = this.tsParseNonArrayType();\n      if (this.lookaheadCharCode() === 58) {\n        labeled = true;\n        label = this.createIdentifier(this.startNodeAt(startLoc), wordName);\n        this.expect(17);\n        this.expect(14);\n        type = this.tsParseType();\n      } else {\n        labeled = false;\n        type = typeOrLabel;\n        this.expect(17);\n      }\n    } else {\n      type = this.tsParseType();\n      optional = this.eat(17);\n      labeled = this.eat(14);\n    }\n    if (labeled) {\n      let labeledNode;\n      if (label) {\n        labeledNode = this.startNodeAtNode(label);\n        labeledNode.optional = optional;\n        labeledNode.label = label;\n        labeledNode.elementType = type;\n        if (this.eat(17)) {\n          labeledNode.optional = true;\n          this.raise(TSErrors.TupleOptionalAfterType, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n      } else {\n        labeledNode = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n        this.raise(TSErrors.InvalidTupleMemberLabel, {\n          at: type\n        });\n        labeledNode.label = type;\n        labeledNode.elementType = this.tsParseType();\n      }\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n    if (rest) {\n      const restNode = this.startNodeAt(startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n    return type;\n  }\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));\n    return this.finishNode(node, type);\n  }\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n    switch (this.state.type) {\n      case 132:\n      case 133:\n      case 131:\n      case 85:\n      case 86:\n        node.literal = super.parseExprAtom();\n        break;\n      default:\n        this.unexpected();\n    }\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = super.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n    if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 131:\n      case 132:\n      case 133:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n          if (nextToken.type !== 132 && nextToken.type !== 133) {\n            this.unexpected();\n          }\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n        break;\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n      case 87:\n        return this.tsParseTypeQuery();\n      case 83:\n        return this.tsParseImportType();\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n      case 0:\n        return this.tsParseTupleType();\n      case 10:\n        return this.tsParseParenthesizedType();\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n      default:\n        {\n          const {\n            type\n          } = this.state;\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n    this.unexpected();\n  }\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n    return type;\n  }\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, {\n          at: node\n        });\n    }\n  }\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(113);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n  tsParseConstraintForInferType() {\n    if (this.eat(81)) {\n      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());\n      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {\n        return constraint;\n      }\n    }\n  }\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(113) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());\n  }\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n    if (this.match(5)) {\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        this.parseObjectLike(8, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused) {\n        return false;\n      }\n    }\n    if (this.match(0)) {\n      this.next();\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        super.parseBindingList(3, 93, 1);\n        return errors.length === previousErrorCount;\n      } catch (_unused2) {\n        return false;\n      }\n    }\n    return false;\n  }\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n      if (this.match(11)) {\n        this.next();\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n  }\n  tsTryParseTypeAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeAnnotation();\n    }\n  }\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n    if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 107) {\n      return false;\n    }\n    const containsEsc = this.state.containsEsc;\n    this.next();\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n    if (containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.lastTokStartLoc,\n        reservedWord: \"asserts\"\n      });\n    }\n    return true;\n  }\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());\n    this.expect(17);\n    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    this.expect(14);\n    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n  isAbstractConstructorSignature() {\n    return this.isContextual(122) && this.lookahead().type === 77;\n  }\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n    return this.tsParseUnionTypeOrHigher();\n  }\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, {\n        at: this.state.startLoc\n      });\n    }\n    const node = this.startNode();\n    node.typeAnnotation = this.tsInType(() => {\n      this.next();\n      return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();\n    });\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n  tsParseHeritageClause(token) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", () => {\n      const node = this.startNode();\n      node.expression = this.tsParseEntityName();\n      if (this.match(47)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    });\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, {\n        at: originalStartLoc,\n        token\n      });\n    }\n    return delimitedList;\n  }\n  tsParseInterfaceDeclaration(node, properties = {}) {\n    if (this.hasFollowingLineBreak()) return null;\n    this.expectContextual(127);\n    if (properties.declare) node.declare = true;\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, {\n        at: this.state.startLoc\n      });\n    }\n    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_TS_TYPE);\n    node.typeAnnotation = this.tsInType(() => {\n      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);\n      this.expect(29);\n      if (this.isContextual(112) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n  tsInDisallowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsInAllowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = false;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsEatThenParseType(token) {\n    if (this.match(token)) {\n      return this.tsNextThenParseType();\n    }\n  }\n  tsExpectThenParseType(token) {\n    return this.tsInType(() => {\n      this.expect(token);\n      return this.tsParseType();\n    });\n  }\n  tsNextThenParseType() {\n    return this.tsInType(() => {\n      this.next();\n      return this.tsParseType();\n    });\n  }\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(131) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);\n    if (this.eat(29)) {\n      node.initializer = super.parseMaybeAssignAllowIn();\n    }\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n  tsParseEnumDeclaration(node, properties = {}) {\n    if (properties.const) node.const = true;\n    if (properties.declare) node.declare = true;\n    this.expectContextual(124);\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n    if (!nested) {\n      this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n    }\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(110)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(131)) {\n      node.id = super.parseStringLiteral(this.state.value);\n    } else {\n      this.unexpected();\n    }\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {\n    node.isExport = isExport || false;\n    node.id = maybeDefaultIdentifier || this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, {\n        at: moduleReference\n      });\n    }\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n  tsIsExternalModuleReference() {\n    return this.isContextual(117) && this.lookaheadCharCode() === 40;\n  }\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(117);\n    this.expect(10);\n    if (!this.match(131)) {\n      this.unexpected();\n    }\n    node.expression = super.parseExprAtom();\n    this.expect(11);\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n    if (result !== undefined && result !== false) {\n      return result;\n    }\n    this.state = state;\n  }\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n    let startType = this.state.type;\n    let kind;\n    if (this.isContextual(99)) {\n      startType = 74;\n      kind = \"let\";\n    }\n    return this.tsInAmbientContext(() => {\n      switch (startType) {\n        case 68:\n          nany.declare = true;\n          return super.parseFunctionStatement(nany, false, false);\n        case 80:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n        case 124:\n          return this.tsParseEnumDeclaration(nany, {\n            declare: true\n          });\n        case 110:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        case 75:\n        case 74:\n          if (!this.match(75) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n          this.expect(75);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true\n          });\n        case 127:\n          {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true\n            });\n            if (result) return result;\n          }\n        default:\n          if (tokenIsIdentifier(startType)) {\n            return this.tsParseDeclaration(nany, this.state.value, true, null);\n          }\n      }\n    });\n  }\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);\n  }\n  tsParseExpressionStatement(node, expr, decorators) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n        break;\n      default:\n        return this.tsParseDeclaration(node, expr.name, false, decorators);\n    }\n  }\n  tsParseDeclaration(node, value, next, decorators) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node, decorators);\n        }\n        break;\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(131)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n        break;\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n        break;\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n        break;\n    }\n  }\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n    return !this.isLineTerminator();\n  }\n  tsTryParseGenericAsyncArrowFunction(startLoc) {\n    if (!this.match(47)) return;\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startLoc);\n      node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    if (!res) return;\n    return super.parseArrowExpression(res, null, true);\n  }\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) return;\n    return this.tsParseTypeArguments();\n  }\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, {\n        at: node\n      });\n    } else if (!this.state.inType && this.curContext() === types.brace) {\n      this.reScan_lt_gt();\n    }\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n  parseAssignableListItem(flags, decorators) {\n    const startLoc = this.state.startLoc;\n    const modified = {};\n    this.tsParseModifiers({\n      allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n    }, modified);\n    const accessibility = modified.accessibility;\n    const override = modified.override;\n    const readonly = modified.readonly;\n    if (!(flags & 4) && (accessibility || readonly || override)) {\n      this.raise(TSErrors.UnexpectedParameterModifier, {\n        at: startLoc\n      });\n    }\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startLoc);\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n          at: pp\n        });\n      }\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  isSimpleParameter(node) {\n    return node.type === \"TSParameterProperty\" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);\n  }\n  tsDisallowOptionalPattern(node) {\n    for (const param of node.params) {\n      if (param.type !== \"Identifier\" && param.optional && !this.state.isAmbientContext) {\n        this.raise(TSErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n    }\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    this.tsDisallowOptionalPattern(node);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      return this.finishNode(node, bodilessType);\n    }\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, {\n        at: node\n      });\n      if (node.declare) {\n        return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n      }\n    }\n    this.tsDisallowOptionalPattern(node);\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(node);\n    }\n  }\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, {\n          at: node.typeAnnotation\n        });\n      }\n    });\n  }\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n    let isOptionalCall = false;\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n        if (!typeArguments) return;\n        if (isOptionalCall && !this.match(10)) {\n          missingParenErrorLoc = this.state.curPosition();\n          return;\n        }\n        if (tokenIsTemplate(this.state.type)) {\n          const result = super.parseTaggedTemplateExpression(base, startLoc, state);\n          result.typeParameters = typeArguments;\n          return result;\n        }\n        if (!noCalls && this.eat(10)) {\n          const node = this.startNodeAt(startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(11, false);\n          this.tsCheckForInvalidTypeCasts(node.arguments);\n          node.typeParameters = typeArguments;\n          if (state.optionalChainMember) {\n            node.optional = isOptionalCall;\n          }\n          return this.finishCallExpression(node, state.optionalChainMember);\n        }\n        const tokenType = this.state.type;\n        if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {\n          return;\n        }\n        const node = this.startNodeAt(startLoc);\n        node.expression = base;\n        node.typeParameters = typeArguments;\n        return this.finishNode(node, \"TSInstantiationExpression\");\n      });\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n      if (result) {\n        if (result.type === \"TSInstantiationExpression\" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {\n          this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, {\n            at: this.state.startLoc\n          });\n        }\n        return result;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, state);\n  }\n  parseNewCallee(node) {\n    var _callee$extra;\n    super.parseNewCallee(node);\n    const {\n      callee\n    } = node;\n    if (callee.type === \"TSInstantiationExpression\" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {\n      node.typeParameters = callee.typeParameters;\n      node.callee = callee.expression;\n    }\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    let isSatisfies;\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(118)))) {\n      const node = this.startNodeAt(leftStartLoc);\n      node.expression = left;\n      node.typeAnnotation = this.tsInType(() => {\n        this.next();\n        if (this.match(75)) {\n          if (isSatisfies) {\n            this.raise(Errors.UnexpectedKeyword, {\n              at: this.state.startLoc,\n              keyword: \"const\"\n            });\n          }\n          return this.tsParseTypeReference();\n        }\n        return this.tsParseType();\n      });\n      this.finishNode(node, isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartLoc, minPrec);\n    }\n    return super.parseExprOp(left, leftStartLoc, minPrec);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (!this.state.isAmbientContext) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(TSErrors.ImportReflectionHasImportType, {\n        at: node.specifiers[0].loc.start\n      });\n    }\n  }\n  checkDuplicateExports() {}\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(128)) {\n      const ch = this.lookaheadCharCode();\n      return isExport ? ch === 123 || ch === 42 : ch !== 61;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      node.exportKind = phase === \"type\" ? \"type\" : \"value\";\n    } else {\n      node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n    }\n  }\n  parseImport(node) {\n    if (this.match(131)) {\n      node.importKind = \"value\";\n      return super.parseImport(node);\n    }\n    let importNode;\n    if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {\n      node.importKind = \"value\";\n      return this.tsParseImportEqualsDeclaration(node);\n    } else if (this.isContextual(128)) {\n      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n      if (this.lookaheadCharCode() === 61) {\n        return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);\n      } else {\n        importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);\n      }\n    } else {\n      importNode = super.parseImport(node);\n    }\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n        at: importNode\n      });\n    }\n    return importNode;\n  }\n  parseExport(node, decorators) {\n    if (this.match(83)) {\n      this.next();\n      let maybeDefaultIdentifier = null;\n      if (this.isContextual(128) && this.isPotentialImportPhase(false)) {\n        maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n      } else {\n        node.importKind = \"value\";\n      }\n      return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = super.parseExpression();\n      this.semicolon();\n      this.sawUnambiguousESM = true;\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(126);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      return super.parseExport(node, decorators);\n    }\n  }\n  isAbstractClass() {\n    return this.isContextual(122) && this.lookahead().type === 80;\n  }\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      return this.parseClass(cls, true, true);\n    }\n    if (this.match(127)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    const {\n      isAmbientContext\n    } = this.state;\n    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);\n    if (!isAmbientContext) return declaration;\n    for (const {\n      id,\n      init\n    } of declaration.declarations) {\n      if (!init) continue;\n      if (kind !== \"const\" || !!id.typeAnnotation) {\n        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n          at: init\n        });\n      } else if (!isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))) {\n        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {\n          at: init\n        });\n      }\n    }\n    return declaration;\n  }\n  parseStatementContent(flags, decorators) {\n    if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n      const node = this.startNode();\n      this.expect(75);\n      return this.tsParseEnumDeclaration(node, {\n        const: true\n      });\n    }\n    if (this.isContextual(124)) {\n      return this.tsParseEnumDeclaration(this.startNode());\n    }\n    if (this.isContextual(127)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseStatementContent(flags, decorators);\n  }\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n      return !!member[modifier];\n    });\n  }\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(104) && this.lookaheadCharCode() === 123;\n  }\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers({\n      allowedModifiers: modifiers,\n      disallowedModifiers: [\"in\", \"out\"],\n      stopOnStartOfClassStaticBlock: true,\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    }, member);\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n            at: this.state.curPosition()\n          });\n        }\n        super.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n    if (idx) {\n      classBody.body.push(idx);\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, {\n          at: member\n        });\n      }\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, {\n          at: member,\n          modifier: member.accessibility\n        });\n      }\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, {\n          at: member\n        });\n      }\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, {\n          at: member\n        });\n      }\n      return;\n    }\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n        at: member\n      });\n    }\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, {\n          at: member\n        });\n      }\n    }\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, {\n        at: methodOrProp\n      });\n    }\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, {\n        at: methodOrProp\n      });\n    }\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;\n    return decl || super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n    const result = this.tryParse(() => super.parseConditional(expr, startLoc));\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n      return expr;\n    }\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  parseParenItem(node, startLoc) {\n    node = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n    return node;\n  }\n  parseExportDeclaration(node) {\n    if (!this.state.isAmbientContext && this.isContextual(123)) {\n      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n    }\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(123);\n    if (isDeclare && (this.isContextual(123) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n        at: this.state.startLoc\n      });\n    }\n    const isIdentifier = tokenIsIdentifier(this.state.type);\n    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);\n    if (!declaration) return null;\n    if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n      node.exportKind = \"type\";\n    }\n    if (isDeclare) {\n      this.resetStartLocation(declaration, startLoc);\n      declaration.declare = true;\n    }\n    return declaration;\n  }\n  parseClassId(node, isStatement, optionalId, bindingType) {\n    if ((!isStatement || optionalId) && this.isContextual(111)) {\n      return;\n    }\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional) {\n      if (this.eat(35)) {\n        node.definite = true;\n      } else if (this.eat(17)) {\n        node.optional = true;\n      }\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n        at: this.state.startLoc\n      });\n    }\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, {\n        at: this.state.startLoc,\n        propertyName: key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n      });\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, {\n        at: node\n      });\n    }\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, {\n        at: node,\n        modifier: node.accessibility\n      });\n    }\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n  parseClassAccessorProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (node.optional) {\n      this.raise(TSErrors.AccessorCannotBeOptional, {\n        at: node\n      });\n    }\n    return super.parseClassAccessorProperty(node);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, {\n        at: typeParameters\n      });\n    }\n    const {\n      declare = false,\n      kind\n    } = method;\n    if (declare && (kind === \"get\" || kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, {\n        at: method,\n        kind\n      });\n    }\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n    if (this.eatContextual(111)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) prop.typeParameters = typeParameters;\n    return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n  }\n  parseFunctionParams(node, isConstructor) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;\n    let state;\n    let jsx;\n    let typeCast;\n    if (this.hasPlugin(\"jsx\") && (this.match(140) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n    if (!state || state === this.state) state = this.state.clone();\n    let typeParameters;\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n      typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n    throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);\n  }\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n    if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, {\n        at: node\n      });\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    }\n    return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n    return super.parseArrow(node);\n  }\n  parseAssignableListItemTypes(param, flags) {\n    if (!(flags & 2)) return param;\n    if (this.eat(17)) {\n      param.optional = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n      case \"TSParameterProperty\":\n        return true;\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.toAssignableParenthesizedExpression(node, isLHS);\n        break;\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        if (isLHS) {\n          this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, {\n            at: node\n          });\n        } else {\n          this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n            at: node\n          });\n        }\n        this.toAssignable(node.expression, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n          node.left = this.typeCastToParameter(node.left);\n        }\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isLHS);\n        break;\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSTypeAssertion\":\n      case \"TSNonNullExpression\":\n        this.checkToRestConversion(node.expression, false);\n        break;\n      default:\n        super.checkToRestConversion(node, allowPattern);\n    }\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn({\n      TSTypeCastExpression: true,\n      TSParameterProperty: \"parameter\",\n      TSNonNullExpression: \"expression\",\n      TSAsExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n      TSSatisfiesExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n      TSTypeAssertion: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true]\n    }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  parseBindingAtom() {\n    if (this.state.type === 78) {\n      return this.parseIdentifier(true);\n    }\n    return super.parseBindingAtom();\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n      this.unexpected(null, 10);\n    }\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    }\n    return super.checkCommaAfterRest(close);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, {\n        at: node.typeAnnotation\n      });\n    }\n    return node;\n  }\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        this.finishOp(48, 1);\n        return;\n      }\n      if (code === 60) {\n        this.finishOp(47, 1);\n        return;\n      }\n    }\n    super.getTokenFromCode(code);\n  }\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n    return type;\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n    return super.shouldParseArrow(params);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n    return param;\n  }\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n  parseClass(node, isStatement, optionalId) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n    try {\n      return super.parseClass(node, isStatement, optionalId);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n  tsParseAbstractDeclaration(node, decorators) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));\n    } else if (this.isContextual(127)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n          at: node\n        });\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {\n    const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, {\n          at: method,\n          methodName: key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n        });\n      }\n    }\n    return method;\n  }\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.parse();\n  }\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.getExpression();\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);\n  }\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      if (isImport) {\n        leftOfAs = this.parseIdentifier(true);\n        if (!this.isContextual(93)) {\n          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);\n        }\n      } else {\n        leftOfAs = this.parseModuleExportName();\n      }\n    }\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n        at: loc\n      });\n    }\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n    if (isImport) {\n      this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);\n    }\n  }\n};\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  const {\n    computed,\n    property\n  } = expression;\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nfunction isValidAmbientConstInitializer(expression, estree) {\n  var _expression$extra;\n  const {\n    type\n  } = expression;\n  if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const {\n        value\n      } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\nfunction isNumber(expression, estree) {\n  if (estree) {\n    return expression.type === \"Literal\" && (typeof expression.value === \"number\" || \"bigint\" in expression);\n  }\n  return expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\";\n}\nfunction isNegativeNumber(expression, estree) {\n  if (expression.type === \"UnaryExpression\") {\n    const {\n      operator,\n      argument\n    } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\"\n});\nvar placeholders = superClass => class PlaceholdersParserMixin extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(142)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace();\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace();\n      this.expect(142);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      this.finishOp(142, 2);\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(refExpressionErrors);\n  }\n  parseIdentifier(liberal) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word !== undefined) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"Placeholder\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  toAssignable(node, isLHS) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (super.chStartsBindingIdentifier(ch, pos)) {\n      return true;\n    }\n    const nextToken = this.lookahead();\n    if (nextToken.type === 142) {\n      return true;\n    }\n    return false;\n  }\n  verifyBreakContinue(node, isBreak) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(node, isBreak);\n  }\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(node, expr);\n    }\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n  parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);\n  }\n  parseFunctionId(requireId) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId);\n  }\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (placeholder) {\n      if (this.match(81) || this.match(142) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n          at: this.state.startLoc\n        });\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n    super.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || super.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n  parseExport(node, decorators) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(node, decorators);\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node, decorators);\n  }\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(142), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    var _specifiers;\n    if ((_specifiers = node.specifiers) != null && _specifiers.length) {\n      return true;\n    }\n    return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n  }\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(node);\n    node.specifiers = [];\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    node.specifiers.push(this.finishNode(specifier, \"ImportDefaultSpecifier\"));\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n    this.expectContextual(97);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource();\n  }\n  assertNoSpace() {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      this.raise(PlaceholderErrors.UnexpectedSpace, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }\n};\nvar v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName();\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);\n  }\n};\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return plugin[1][option];\n  }\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n    if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean, if specified.\");\n    }\n    const allowCallParenthesized = getPluginOption(plugins, \"decorators\", \"allowCallParenthesized\");\n    if (allowCallParenthesized != null && typeof allowCallParenthesized !== \"boolean\") {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\") || hasPlugin(plugins, \"importAttributes\")) {\n        throw new Error(\"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\");\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n  if (hasPlugin(plugins, \"importAssertions\") && hasPlugin(plugins, \"importAttributes\")) {\n    throw new Error(\"Cannot combine importAssertions and importAttributes plugins.\");\n  }\n  if (hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowNewTargetOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true,\n  annexB: true\n};\nfunction getOptions(opts) {\n  if (opts && opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n  const options = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, {\n          at: key\n        });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, {\n            at: key\n          });\n        }\n      }\n      protoRef.used = true;\n    }\n  }\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(137)) {\n      this.unexpected();\n    }\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n  parseExpressionBase(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(12)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(106)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const {\n      type\n    } = this.state;\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      if (this.match(29)) {\n        this.toAssignable(left, true);\n        node.left = left;\n        const startIndex = startLoc.index;\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\")\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    return left;\n  }\n  parseMaybeConditional(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(136) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n  parseExprOps(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value\n        });\n      }\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n        this.next();\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc\n            });\n          }\n        }\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc\n          });\n        }\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n  parseExprOpRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(106)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n  parseExprOpBaseRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n  parseHackPipeBody() {\n    var _body$extra;\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipeTopicUnused, {\n        at: startLoc\n      });\n    }\n    return body;\n  }\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument\n      });\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(34);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, {\n            at: node\n          });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, {\n            at: node\n          });\n        }\n      }\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {\n          at: startLoc\n        });\n        return this.parseAwait(startLoc);\n      }\n    }\n    return expr;\n  }\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      const updateExpressionNode = node;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\")\n      });\n      return node;\n    }\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: expr = this.finishNode(node, \"UpdateExpression\")\n      });\n    }\n    return expr;\n  }\n  parseExprSubscripts(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseSubscripts(expr, startLoc);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n    let optional = false;\n    if (type === 18) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, {\n          at: this.state.startLoc\n        });\n        if (this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n  parseMember(base, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(136)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, {\n          at: startLoc\n        });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n  parseBind(base, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startLoc, noCalls);\n  }\n  parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    const node = this.startNodeAt(startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n    let finishedNode = this.finishCallExpression(node, optionalChainMember);\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return finishedNode;\n  }\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n  parseTaggedTemplateExpression(base, startLoc, state) {\n    const node = this.startNodeAt(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, {\n        at: startLoc\n      });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n  expectImportAttributesPlugin() {\n    if (!this.hasPlugin(\"importAssertions\")) {\n      this.expectPlugin(\"importAttributes\");\n    }\n  }\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectImportAttributesPlugin();\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount: this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? 2 : 1\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, {\n              at: arg\n            });\n          }\n        }\n      }\n    }\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAttributes\") && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n  parseNoCallExpr() {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    let decorators = null;\n    const {\n      type\n    } = this.state;\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n      case 83:\n        node = this.startNode();\n        this.next();\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n        if (!this.match(10)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n      case 132:\n        return this.parseNumericLiteral(this.state.value);\n      case 133:\n        return this.parseBigIntLiteral(this.state.value);\n      case 134:\n        return this.parseDecimalLiteral(this.state.value);\n      case 131:\n        return this.parseStringLiteral(this.state.value);\n      case 84:\n        return this.parseNullLiteral();\n      case 85:\n        return this.parseBooleanLiteral(true);\n      case 86:\n        return this.parseBooleanLiteral(false);\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n      case 26:\n        decorators = this.parseDecorators();\n      case 80:\n        return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);\n      case 77:\n        return this.parseNewOrNewTarget();\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(Errors.UnsupportedBind, {\n              at: callee\n            });\n          }\n        }\n      case 136:\n        {\n          this.raise(Errors.PrivateInExpectedIn, {\n            at: this.state.startLoc,\n            identifierName: this.state.value\n          });\n          return this.parsePrivateName();\n        }\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          }\n          this.unexpected();\n          break;\n        }\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          } else {\n            this.unexpected();\n          }\n          break;\n        }\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(125) && this.lookaheadInLineCharCode() === 123) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === \"smart\" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {\n          at: startLoc\n        });\n      }\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType)\n      });\n    }\n  }\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n      case \"smart\":\n        return tokenType === 27;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, {\n          at: startLoc\n        });\n    }\n  }\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition()\n      });\n    }\n    this.expect(19);\n    return this.parseArrowExpression(node, params, true);\n  }\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.SuperNotAllowed, {\n        at: node\n      });\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.UnexpectedSuper, {\n        at: node\n      });\n    }\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(Errors.UnsupportedSuper, {\n        at: node\n      });\n    }\n    return this.finishNode(node, \"Super\");\n  }\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      if (this.match(102)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName\n      });\n    }\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n    if (this.isContextual(100)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, {\n          at: id\n        });\n      }\n      this.sawUnambiguousESM = true;\n    }\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n      if (this.match(21)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startLoc);\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n    return this.wrapParenthesis(startLoc, val);\n  }\n  wrapParenthesis(startLoc, expression) {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n      this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);\n      return expression;\n    }\n    const parenExpression = this.startNodeAt(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n  parseParenItem(node, startLoc) {\n    return node;\n  }\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {\n        this.raise(Errors.UnexpectedNewTarget, {\n          at: metaProp\n        });\n      }\n      return metaProp;\n    }\n    return this.parseNew(node);\n  }\n  parseNew(node) {\n    this.parseNewCallee(node);\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n    return this.finishNode(node, \"NewExpression\");\n  }\n  parseNewCallee(node) {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, {\n        at: node.callee\n      });\n    }\n  }\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)\n        });\n      }\n    }\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return finishedNode;\n  }\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(Errors.InvalidRecordProperty, {\n          at: prop\n        });\n      }\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n      node.properties.push(prop);\n    }\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc\n        });\n      }\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n    prop.method = false;\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n    return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n  checkGetterSetterParams(method) {\n    var _params;\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: method\n      });\n    }\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: method\n      });\n    }\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc\n          });\n        }\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 132:\n            key = this.parseNumericLiteral(value);\n            break;\n          case 131:\n            key = this.parseStringLiteral(value);\n            break;\n          case 133:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case 134:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case 136:\n            {\n              const privateKeyLoc = this.state.startLoc;\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(Errors.UnexpectedPrivateField, {\n                  at: privateKeyLoc\n                });\n              }\n              key = this.parsePrivateName();\n              break;\n            }\n          default:\n            this.unexpected();\n        }\n      }\n      prop.key = key;\n      if (type !== 136) {\n        prop.computed = false;\n      }\n    }\n    return prop.key;\n  }\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return finishedNode;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n        if (hasStrictModeDirective && nonSimple) {\n          this.raise(Errors.IllegalLanguageModeDirective, {\n            at: (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node\n          });\n        }\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n        if (this.state.strict && node.id) {\n          this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n  isSimpleParameter(node) {\n    return node.type === \"Identifier\";\n  }\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = !allowDuplicates && new Set();\n    const formalParameters = {\n      type: \"FormalParameters\"\n    };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged\n      });\n    }\n  }\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\"\n        });\n      }\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n    return elt;\n  }\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(liberal);\n    return this.createIdentifier(node, name);\n  }\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n  parseIdentifierName(liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(130);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n    this.next();\n    return name;\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word\n      });\n      return;\n    }\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc\n        });\n        return;\n      }\n      this.expressionScope.recordAsyncArrowParametersError({\n        at: startLoc\n      });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, {\n          at: startLoc\n        });\n        return;\n      }\n    }\n  }\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n  parseAwait(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {\n      at: node\n    });\n    if (this.eat(55)) {\n      this.raise(Errors.ObsoleteAwaitStar, {\n        at: node\n      });\n    }\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 101 && !this.state.containsEsc || type === 135 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {\n      at: node\n    });\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n      switch (this.state.type) {\n        case 13:\n        case 137:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc\n        });\n      }\n    }\n  }\n  parseSmartPipelineBodyInStyle(childExpr, startLoc) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, {\n        at: this.state.startLoc\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, {\n        at: startLoc\n      });\n    }\n  }\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n  parseFSharpPipelineBody(prec) {\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    if (!this.match(5)) {\n      this.unexpected(null, 5);\n    }\n    const program = this.startNodeAt(this.state.endLoc);\n    this.next();\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n  parsePropertyNamePrefixOperator(prop) {}\n}\nconst loopLabel = {\n    kind: \"loop\"\n  },\n  switchLabel = {\n    kind: \"switch\"\n  };\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n    if (typeof type === \"number\") {\n      {\n        if (type === 136) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(130),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n    return this.finishNode(file, \"File\");\n  }\n  parseProgram(program, end = 137, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, {\n          at,\n          localName\n        });\n      }\n    }\n    let finishedProgram;\n    if (end === 137) {\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      finishedProgram = this.finishNodeAt(program, \"Program\", createPositionWithColumnOffset(this.state.startLoc, -1));\n    }\n    return finishedProgram;\n  }\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n  isLet() {\n    if (!this.isContextual(99)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === 92) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  chStartsBindingPattern(ch) {\n    return ch === 91 || ch === 123;\n  }\n  hasFollowingBindingAtom() {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);\n  }\n  hasInLineFollowingBindingIdentifier() {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n  startsUsingForOf() {\n    const {\n      type,\n      containsEsc\n    } = this.lookahead();\n    if (type === 101 && !containsEsc) {\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n  startsAwaitUsing() {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n  parseModuleItem() {\n    return this.parseStatementLike(1 | 2 | 4 | 8);\n  }\n  parseStatementListItem() {\n    return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));\n  }\n  parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {\n    let flags = 0;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= 4;\n      if (allowLabeledFunction) {\n        flags |= 8;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n  parseStatement() {\n    return this.parseStatementLike(0);\n  }\n  parseStatementLike(flags) {\n    let decorators = null;\n    if (this.match(26)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n  parseStatementContent(flags, decorators) {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & 2);\n    const allowFunctionDeclaration = !!(flags & 4);\n    const topLevel = flags & 1;\n    switch (starttype) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n      case 64:\n        return this.parseDebuggerStatement(node);\n      case 90:\n        return this.parseDoWhileStatement(node);\n      case 91:\n        return this.parseForStatement(node);\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, {\n            at: this.state.startLoc\n          });\n        }\n        return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);\n      case 80:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(this.maybeTakeDecorators(decorators, node), true);\n      case 69:\n        return this.parseIfStatement(node);\n      case 70:\n        return this.parseReturnStatement(node);\n      case 71:\n        return this.parseSwitchStatement(node);\n      case 72:\n        return this.parseThrowStatement(node);\n      case 73:\n        return this.parseTryStatement(node);\n      case 96:\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, {\n              at: node\n            });\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, {\n              at: node\n            });\n          }\n          this.next();\n          return this.parseVarStatement(node, \"await using\");\n        }\n        break;\n      case 105:\n        if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc\n          });\n        }\n        return this.parseVarStatement(node, \"using\");\n      case 99:\n        {\n          if (this.state.containsEsc) {\n            break;\n          }\n          const next = this.nextTokenStart();\n          const nextCh = this.codePointAtPos(next);\n          if (nextCh !== 91) {\n            if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {\n              break;\n            }\n          }\n        }\n      case 75:\n        {\n          if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, {\n              at: this.state.startLoc\n            });\n          }\n        }\n      case 74:\n        {\n          const kind = this.state.value;\n          return this.parseVarStatement(node, kind);\n        }\n      case 92:\n        return this.parseWhileStatement(node);\n      case 76:\n        return this.parseWithStatement(node);\n      case 5:\n        return this.parseBlock();\n      case 13:\n        return this.parseEmptyStatement(node);\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(Errors.UnexpectedImportExport, {\n              at: this.state.startLoc\n            });\n          }\n          this.next();\n          let result;\n          if (starttype === 83) {\n            result = this.parseImport(node);\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node, decorators);\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n          this.assertModuleNodeAllowed(result);\n          return result;\n        }\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (!allowDeclaration) {\n              this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n                at: this.state.startLoc\n              });\n            }\n            this.next();\n            return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);\n          }\n        }\n    }\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, flags);\n    } else {\n      return this.parseExpressionStatement(node, expr, decorators);\n    }\n  }\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, {\n        at: node\n      });\n    }\n  }\n  decoratorsEnabledBeforeExport() {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false;\n  }\n  maybeTakeDecorators(maybeDecorators, classNode, exportNode) {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        if (typeof this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== \"boolean\") {\n          this.raise(Errors.DecoratorsBeforeAfterExport, {\n            at: classNode.decorators[0]\n          });\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n  parseDecorators(allowExport) {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(26));\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, {\n          at: this.state.startLoc\n        });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n    return decorators;\n  }\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n    const node = this.startNode();\n    this.next();\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr;\n      if (this.match(10)) {\n        const startLoc = this.state.startLoc;\n        this.next();\n        expr = this.parseExpression();\n        this.expect(11);\n        expr = this.wrapParenthesis(startLoc, expr);\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (this.getPluginOption(\"decorators\", \"allowCallParenthesized\") === false && node.expression !== expr) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(136)) {\n            this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n    return expr;\n  }\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n  verifyBreakContinue(node, isBreak) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, {\n        at: node,\n        type\n      });\n    }\n  }\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n  parseDoWhileStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n    if (this.isAwaitAllowed() && this.eatContextual(96)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n    const startsWithLet = this.isContextual(99);\n    {\n      const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(105) && this.startsUsingForOf();\n      const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;\n      if (this.match(74) || this.match(75) || isLetOrUsing) {\n        const initNode = this.startNode();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, {\n              at: this.state.startLoc\n            });\n          }\n          this.next();\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n        const isForIn = this.match(58);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, {\n            at: init\n          });\n        }\n        if ((isForIn || this.isContextual(101)) && init.declarations.length === 1) {\n          return this.parseForIn(node, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node, init);\n      }\n    }\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(101);\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, {\n          at: init\n        });\n      }\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(Errors.ForOfAsync, {\n          at: init\n        });\n      }\n    }\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, {\n        in: {\n          type\n        }\n      });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n  parseFunctionStatement(node, isAsync, isHangingDeclaration) {\n    this.next();\n    return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));\n  }\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, {\n        at: this.state.startLoc\n      });\n    }\n    this.next();\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n  parseThrowStatement(node) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    this.scope.enter(this.options.annexB && param.type === \"Identifier\" ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: {\n        type: \"CatchClause\"\n      },\n      binding: BIND_CATCH_PARAM\n    });\n    return param;\n  }\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, {\n        at: node\n      });\n    }\n    return this.finishNode(node, \"TryStatement\");\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, {\n        at: this.state.startLoc\n      });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    return this.finishNode(node, \"WithStatement\");\n  }\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n  parseLabeledStatement(node, maybeName, expr, flags) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName\n        });\n      }\n    }\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(5);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n    while (!this.match(end)) {\n      const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n          continue;\n        }\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n    this.next();\n  }\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n      });\n    }\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: {\n          type: \"ForStatement\"\n        }\n      });\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n  parseVar(node, isFor, kind, allowMissingInitializer = false) {\n    const declarations = node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      if (decl.init === null && !allowMissingInitializer) {\n        if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\"\n          });\n        } else if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\"\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n    return node;\n  }\n  parseVarId(decl, kind) {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: {\n        type: \"VariableDeclarator\"\n      },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL\n    });\n    decl.id = id;\n  }\n  parseAsyncFunctionExpression(node) {\n    return this.parseFunction(node, 8);\n  }\n  parseFunction(node, flags = 0) {\n    const hangingDeclaration = flags & 2;\n    const isDeclaration = !!(flags & 1);\n    const requireId = isDeclaration && !(flags & 4);\n    const isAsync = !!(flags & 8);\n    this.initFunction(node, isAsync);\n    if (this.match(55)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc\n        });\n      }\n      this.next();\n      node.generator = true;\n    }\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n    if (isDeclaration && !hangingDeclaration) {\n      this.registerFunctionStatementId(node);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n  parseFunctionParams(node, isConstructor) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));\n    this.expressionScope.exit();\n  }\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n  }\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n  isClassMethod() {\n    return this.match(10);\n  }\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc\n            });\n          }\n          continue;\n        }\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n        const member = this.startNode();\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n        this.parseClassMember(classBody, member, state);\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(Errors.DecoratorConstructor, {\n            at: member\n          });\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(104);\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(136);\n      this.parseClassElementName(method);\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key\n        });\n      }\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(136);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, {\n            at: key\n          });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, {\n            at: key\n          });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n      method.kind = \"method\";\n      const isPrivate = this.match(136);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, {\n            at: publicMethod.key\n          });\n        }\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(136);\n      this.parseClassElementName(publicMethod);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, {\n            at: publicMethod.key\n          });\n        }\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n      this.checkGetterSetterParams(publicMethod);\n    } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(136);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n    if ((type === 130 || type === 131) && member.static && value === \"prototype\") {\n      this.raise(Errors.StaticPrototype, {\n        at: this.state.startLoc\n      });\n    }\n    if (type === 136) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n    return this.parsePropertyName(member);\n  }\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(Errors.DecoratorStaticBlock, {\n        at: member\n      });\n    }\n  }\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(Errors.ConstructorClassField, {\n        at: prop.key\n      });\n    }\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n  }\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed) {\n      const key = prop.key;\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        this.raise(Errors.ConstructorClassField, {\n          at: key\n        });\n      }\n    }\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {}\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n  parseExport(node, decorators) {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, 5);\n    }\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, 97);\n    }\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      var _node2$declaration;\n      const node2 = node;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n    if (this.eat(65)) {\n      const node2 = node;\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      this.checkExport(node2, true, true);\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n    this.unexpected(null, 5);\n  }\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode(id);\n      specifier.exported = id;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    if (this.match(68)) {\n      this.next();\n      return this.parseFunction(expr, 1 | 4);\n    } else if (this.isAsyncFunction()) {\n      this.next();\n      this.next();\n      return this.parseFunction(expr, 1 | 4 | 8);\n    }\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n        this.raise(Errors.DecoratorBeforeExport, {\n          at: this.state.startLoc\n        });\n      }\n      return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);\n    }\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc\n      });\n    }\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n  parseExportDeclaration(node) {\n    if (this.match(80)) {\n      const node = this.parseClass(this.startNode(), true, false);\n      return node;\n    }\n    return this.parseStatementListItem();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 99) {\n        return false;\n      }\n      if ((type === 128 || type === 127) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n        if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n    return false;\n  }\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(97)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n    this.semicolon();\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n          this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n        return true;\n      }\n    }\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n          const declaration = node.declaration;\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName\n              });\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n  checkDuplicateExports(node, exportName) {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, {\n          at: node\n        });\n      } else {\n        this.raise(Errors.DuplicateExport, {\n          at: node,\n          exportName\n        });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(128);\n      const isString = this.match(131);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n    return nodes;\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n  parseModuleExportName() {\n    if (this.match(131)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0)\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n  isJSONModuleImport(node) {\n    if (node.assertions != null) {\n      return node.assertions.some(({\n        key,\n        value\n      }) => {\n        return value.value === \"json\" && (key.type === \"Identifier\" ? key.name === \"type\" : key.value === \"type\");\n      });\n    }\n    return false;\n  }\n  checkImportReflection(node) {\n    if (node.module) {\n      var _node$assertions;\n      if (node.specifiers.length !== 1 || node.specifiers[0].type !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start\n        });\n      }\n      if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start\n        });\n      }\n    }\n  }\n  checkJSONModuleImport(node) {\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      const {\n        specifiers\n      } = node;\n      if (specifiers != null) {\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\" ? imported.name !== \"default\" : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start\n          });\n        }\n      }\n    }\n  }\n  isPotentialImportPhase(isExport) {\n    return !isExport && this.isContextual(125);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    if (isExport) {\n      return;\n    }\n    if (phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n  parseMaybeImportPhase(node, isExport) {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(node, isExport, null);\n      return null;\n    }\n    const phaseIdentifier = this.parseIdentifier(true);\n    const {\n      type\n    } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 97 || this.lookaheadCharCode() === 102 : type !== 12;\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);\n      return null;\n    } else {\n      this.applyImportPhase(node, isExport, null);\n      return phaseIdentifier;\n    }\n  }\n  isPrecedingIdImportPhase(phase) {\n    const {\n      type\n    } = this.state;\n    return tokenIsIdentifier(type) ? type !== 97 || this.lookaheadCharCode() === 102 : type !== 12;\n  }\n  parseImport(node) {\n    if (this.match(131)) {\n      return this.parseImportSourceAndAttributes(node);\n    }\n    return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));\n  }\n  parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {\n    node.specifiers = [];\n    const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);\n    const parseNext = !hasDefault || this.eat(12);\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(97);\n    return this.parseImportSourceAndAttributes(node);\n  }\n  parseImportSourceAndAttributes(node) {\n    var _node$specifiers;\n    (_node$specifiers = node.specifiers) != null ? _node$specifiers : node.specifiers = [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    if (!this.match(131)) this.unexpected();\n    return this.parseExprAtom();\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  finishImportSpecifier(specifier, type, bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      in: {\n        type\n      },\n      binding: bindingType\n    });\n    return this.finishNode(specifier, type);\n  }\n  parseImportAttributes() {\n    this.expect(5);\n    const attrs = [];\n    const attrNames = new Set();\n    do {\n      if (this.match(8)) {\n        break;\n      }\n      const node = this.startNode();\n      const keyName = this.state.value;\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(131)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(14);\n      if (!this.match(131)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n    this.expect(8);\n    return attrs;\n  }\n  parseModuleAttributes() {\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key\n        });\n      }\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(14);\n      if (!this.match(131)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n    return attrs;\n  }\n  maybeParseImportAttributes(node) {\n    let attributes;\n    let useWith = false;\n    if (this.match(76)) {\n      if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {\n        return;\n      }\n      this.next();\n      {\n        if (this.hasPlugin(\"moduleAttributes\")) {\n          attributes = this.parseModuleAttributes();\n        } else {\n          this.expectImportAttributesPlugin();\n          attributes = this.parseImportAttributes();\n        }\n      }\n      useWith = true;\n    } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      if (this.hasPlugin(\"importAttributes\")) {\n        if (this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !== true) {\n          this.raise(Errors.ImportAttributesUseAssert, {\n            at: this.state.startLoc\n          });\n        }\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      } else {\n        this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n      }\n      this.next();\n      attributes = this.parseImportAttributes();\n    } else if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n      attributes = [];\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = [];\n      } else return;\n    }\n    if (!useWith && this.hasPlugin(\"importAssertions\")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n  maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode(maybeDefaultIdentifier);\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"));\n      return true;\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc\n          });\n        }\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const specifier = this.startNode();\n      const importedIsString = this.match(131);\n      const isMaybeTypeOnly = this.isContextual(128);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly, undefined);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\", bindingType);\n  }\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\nfunction parse(input, options) {\n  var _options;\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\nconst tokTypes = generateExportedTokenTypes(tt);\nfunction getParser(options, input) {\n  let cls = Parser;\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n  return new cls(options, input);\n}\nconst parserClassCache = {};\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"names":["Object","defineProperty","exports","value","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","keys","key","i","length","indexOf","Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","SyntaxError","SourceTypeModuleError","reflect","last","get","reduce","object","set","item","instantiate","properties","descriptors","map","filter","descriptor","enumerable","assign","split","instance","configurable","ModuleErrors","ImportMetaOutsideModule","message","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","StandardErrors","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitUsingNotInAsyncContext","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportAttributesUseAssert","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipelineOperatorErrors","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","_excluded$1","_excluded2$1","toParseErrorConstructor","_ref","toMessage","loc","details","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","_ref2","rest","Errors","toUnenumerable","toESTreeLocation","node","estree","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","arguments","hasPlugin","_node$arguments$","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","_declaration$decorato","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_FLAGS_NO_LET_IN_LEXICAL","BIND_CLASS","BIND_LEXICAL","BIND_CATCH_PARAM","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","resetPreviousIdentifierLeadingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","lastTokStart","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","_isDigit","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","invalidDigit","invalidCodePoint","_excluded","_excluded2","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","annexB","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","flowParseInterfaceExtends","implements","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","_startLoc","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","isPotentialImportPhase","isExport","applyImportPhase","phase","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","decl","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn$1","hasOwnProperty","unwrapParenthesizedExpression","LValParser","_node$extra3","_node$extra2","operator","arg","checkToRestConversion","elt","element","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseAssignableListItem","parseBindingRestProperty","parseBindingProperty","parsePropertyName","_left","ObjectProperty","checkLVal","in","checkClashes","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","declareNameFromIdentifier","identifier","allowPattern","getOwn","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","TypeScriptParserMixin","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","modified","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","checkType","isLabeled","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","maybeDefaultIdentifier","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","startType","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","reScan_lt_gt","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","isSatisfies","checkKeywords","checkDuplicateExports","importNode","parseMaybeImportPhase","parseImportSpecifiersAndAfter","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","declareClassPrivateMethodInScope","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","placeholders","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrSloppyAnnexBFunctionDeclaration","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","_specifiers","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","_resultError$loc","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","expectImportAttributesPlugin","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifier","startsUsingForOf","startsAwaitUsing","parseModuleItem","parseStatementListItem","allowLabeledFunction","parseStatement","starttype","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithAwaitUsing","starsWithUsingDeclaration","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","discriminant","cases","cur","sawDefault","isCase","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","hangingDeclaration","isDeclaration","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAttributes","checkJSONModuleImport","checkNames","isDefault","isFrom","_declaration$extra","nodes","surrogate","isJSONModuleImport","_node$assertions","nonDefaultNamedSpecifier","phaseIdentifier","isImportPhase","isPrecedingIdImportPhase","parseImportSourceAndAttributes","maybeParseDefaultImportSpecifier","parseNext","_node$specifiers","parseImportAttributes","attrs","attrNames","parseModuleAttributes","useWith","importSpecifier","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"sources":["C:/Users/SMHRD/Desktop/HaruGungang/templete/node_modules/@babel/parser/lib/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n}\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\nvar ParseErrorCode = {\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n};\nconst reflect = (keys, last = keys.length - 1) => ({\n  get() {\n    return keys.reduce((object, key) => object[key], this);\n  },\n  set(value) {\n    keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);\n  }\n});\nconst instantiate = (constructor, properties, descriptors) => Object.keys(descriptors).map(key => [key, descriptors[key]]).filter(([, descriptor]) => !!descriptor).map(([key, descriptor]) => [key, typeof descriptor === \"function\" ? {\n  value: descriptor,\n  enumerable: false\n} : typeof descriptor.reflect === \"string\" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split(\".\"))) : descriptor]).reduce((instance, [key, descriptor]) => Object.defineProperty(instance, key, Object.assign({\n  configurable: true\n}, descriptor)), Object.assign(new constructor(), properties));\nvar ModuleErrors = {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError\n  }\n};\nconst NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\nconst toNodeDescription = ({\n  type,\n  prefix\n}) => type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];\nvar StandardErrors = {\n  AccessorIsGenerator: ({\n    kind\n  }) => `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitUsingNotInAsyncContext: \"'await using' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses: \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport: \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({\n    exportName\n  }) => `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName\n  }) => `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: ({\n    type\n  }) => `'${type === \"ForInStatement\" ? \"for-in\" : \"for-of\"}' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: ({\n    type\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportAttributesUseAssert: \"The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.\",\n  ImportBindingIsString: ({\n    importName\n  }) => `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({\n    maxArgumentCount\n  }) => `\\`import()\\` requires exactly ${maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"}.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault: \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding: 'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags: \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({\n    radix\n  }) => `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({\n    reservedWord\n  }) => `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({\n    identifierName\n  }) => `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({\n    ancestor\n  }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({\n    ancestor\n  }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({\n    unexpected\n  }) => `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({\n    labelName\n  }) => `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`,\n  MissingOneOfPlugins: ({\n    missingPlugin\n  }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({\n    key\n  }) => `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode\n  }) => `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(16)}'.`,\n  ModuleExportUndefined: ({\n    localName\n  }) => `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({\n    identifierName\n  }) => `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({\n    identifierName\n  }) => `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({\n    keyword\n  }) => `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({\n    reservedWord\n  }) => `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected\n  }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${expected ? `, expected \"${expected}\"` : \"\"}`,\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration: \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName\n  }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern: \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({\n    identifierName\n  }) => `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n};\nvar StrictModeErrors = {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: ({\n    referenceName\n  }) => `Assigning to '${referenceName}' in strict mode.`,\n  StrictEvalArgumentsBinding: ({\n    bindingName\n  }) => `Binding '${bindingName}' in strict mode.`,\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\"\n};\nconst UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\nvar PipelineOperatorErrors = {\n  PipeBodyIsTighter: \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({\n    token\n  }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({\n    type\n  }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n    type\n  })}; please wrap it in parentheses.`,\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'\n};\nconst _excluded$1 = [\"toMessage\"],\n  _excluded2$1 = [\"message\"];\nfunction toParseErrorConstructor(_ref) {\n  let {\n      toMessage\n    } = _ref,\n    properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n  return function constructor({\n    loc,\n    details\n  }) {\n    return instantiate(SyntaxError, Object.assign({}, properties, {\n      loc\n    }), {\n      clone(overrides = {}) {\n        const loc = overrides.loc || {};\n        return constructor({\n          loc: new Position(\"line\" in loc ? loc.line : this.loc.line, \"column\" in loc ? loc.column : this.loc.column, \"index\" in loc ? loc.index : this.loc.index),\n          details: Object.assign({}, this.details, overrides.details)\n        });\n      },\n      details: {\n        value: details,\n        enumerable: false\n      },\n      message: {\n        get() {\n          return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;\n        },\n        set(value) {\n          Object.defineProperty(this, \"message\", {\n            value\n          });\n        }\n      },\n      pos: {\n        reflect: \"loc.index\",\n        enumerable: true\n      },\n      missingPlugin: \"missingPlugin\" in details && {\n        reflect: \"details.missingPlugin\",\n        enumerable: true\n      }\n    });\n  };\n}\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n  const ParseErrorConstructors = {};\n  for (const reasonCode of Object.keys(argument)) {\n    const template = argument[reasonCode];\n    const _ref2 = typeof template === \"string\" ? {\n        message: () => template\n      } : typeof template === \"function\" ? {\n        message: template\n      } : template,\n      {\n        message\n      } = _ref2,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);\n    const toMessage = typeof message === \"string\" ? () => message : message;\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage\n    }, syntaxPlugin ? {\n      syntaxPlugin\n    } : {}, rest));\n  }\n  return ParseErrorConstructors;\n}\nconst Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));\nconst {\n  defineProperty\n} = Object;\nconst toUnenumerable = (object, key) => defineProperty(object, key, {\n  enumerable: false,\n  value: object[key]\n});\nfunction toESTreeLocation(node) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\nvar estree = superClass => class ESTreeParserMixin extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n    return file;\n  }\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n  parseBigIntLiteral(value) {\n    let bigInt;\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  directiveToStmt(directive) {\n    const expression = directive.value;\n    delete directive.value;\n    expression.type = \"Literal\";\n    expression.raw = expression.extra.raw;\n    expression.value = expression.extra.expressionValue;\n    const stmt = directive;\n    stmt.type = \"ExpressionStatement\";\n    stmt.expression = expression;\n    stmt.directive = expression.extra.rawValue;\n    delete expression.extra;\n    return stmt;\n  }\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n    classBody.body.push(method);\n  }\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n    return this.finishNode(node, \"MethodDefinition\");\n  }\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") {\n        node.kind = \"init\";\n      }\n      node.shorthand = false;\n    }\n    return node;\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n    return node;\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return type === \"Property\" ? \"value\" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n    return super.isAssignable(node, isBinding);\n  }\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n      this.toAssignable(value, isLHS);\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(Errors.PatternHasAccessor, {\n        at: prop.key\n      });\n    } else if (prop.method) {\n      this.raise(Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n    }\n  }\n  finishCallExpression(unfinished, optional) {\n    const node = super.finishCallExpression(unfinished, optional);\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n      delete node.arguments;\n      delete node.callee;\n    }\n    return node;\n  }\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n    super.toReferencedArguments(node);\n  }\n  parseExport(unfinished, decorators) {\n    const exportStartLoc = this.state.lastTokStartLoc;\n    const node = super.parseExport(unfinished, decorators);\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n      case \"ExportDefaultDeclaration\":\n        {\n          var _declaration$decorato;\n          const {\n            declaration\n          } = node;\n          if ((declaration == null ? void 0 : declaration.type) === \"ClassDeclaration\" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {\n            this.resetStartLocation(node, exportStartLoc);\n          }\n        }\n        break;\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startLoc, noCalls, state);\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n    return node;\n  }\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n    return super.hasPropertyAsPrivateName(node);\n  }\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n  resetStartLocation(node, startLoc) {\n    super.resetStartLocation(node, startLoc);\n    toESTreeLocation(node);\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n};\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass ExportedTokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n}\nconst keywords$1 = new Map();\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\nfunction createToken(name, options = {}) {\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\nfunction createKeywordLike(name, options = {}) {\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _using: createKeywordLike(\"using\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _satisfies: createKeywordLike(\"satisfies\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 130;\n}\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 130;\n}\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 134;\n}\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 127 && token <= 129;\n}\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 119 && token <= 121;\n}\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 122 && token <= 128;\n}\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n  tokenTypes[140].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\nconst SCOPE_OTHER = 0b000000000,\n  SCOPE_PROGRAM = 0b000000001,\n  SCOPE_FUNCTION = 0b000000010,\n  SCOPE_ARROW = 0b000000100,\n  SCOPE_SIMPLE_CATCH = 0b000001000,\n  SCOPE_SUPER = 0b000010000,\n  SCOPE_DIRECT_SUPER = 0b000100000,\n  SCOPE_CLASS = 0b001000000,\n  SCOPE_STATIC_BLOCK = 0b010000000,\n  SCOPE_TS_MODULE = 0b100000000,\n  SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b0000000000001,\n  BIND_KIND_TYPE = 0b0000000000010,\n  BIND_SCOPE_VAR = 0b0000000000100,\n  BIND_SCOPE_LEXICAL = 0b0000000001000,\n  BIND_SCOPE_FUNCTION = 0b0000000010000,\n  BIND_FLAGS_NONE = 0b00000001000000,\n  BIND_FLAGS_CLASS = 0b00000010000000,\n  BIND_FLAGS_TS_ENUM = 0b00000100000000,\n  BIND_FLAGS_TS_CONST_ENUM = 0b00001000000000,\n  BIND_FLAGS_TS_EXPORT_ONLY = 0b00010000000000,\n  BIND_FLAGS_FLOW_DECLARE_FN = 0b00100000000000,\n  BIND_FLAGS_TS_IMPORT = 0b01000000000000,\n  BIND_FLAGS_NO_LET_IN_LEXICAL = 0b10000000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS | BIND_FLAGS_NO_LET_IN_LEXICAL,\n  BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | BIND_FLAGS_NO_LET_IN_LEXICAL,\n  BIND_CATCH_PARAM = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n  BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n  BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n  BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n  BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n  BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM | BIND_FLAGS_NO_LET_IN_LEXICAL,\n  BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n  BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n  BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n  BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_TS_TYPE_IMPORT = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_TS_IMPORT,\n  BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n  CLASS_ELEMENT_KIND_GETTER = 0b010,\n  CLASS_ELEMENT_KIND_SETTER = 0b001,\n  CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n  CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n  CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n  CLASS_ELEMENT_OTHER = 0;\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n}\nclass ScopeHandler {\n  constructor(parser, inModule) {\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n  createScope(flags) {\n    return new Scope(flags);\n  }\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n  exit() {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  maybeExportDefined(scope, name) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n}\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n    return false;\n  }\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n}\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n    const {\n      start: nodeStart\n    } = node;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        break;\n      }\n    }\n  }\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n  resetPreviousIdentifierLeadingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    if (commentStack[length - 1].trailingNode === node) {\n      commentStack[length - 1].trailingNode = null;\n    } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {\n      commentStack[length - 2].trailingNode = null;\n    }\n  }\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n    default:\n      return false;\n  }\n}\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.inDisallowConditionalTypesContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 137;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.firstInvalidTemplateEscapePos = null;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n  init({\n    strictMode,\n    sourceType,\n    startLine,\n    startColumn\n  }) {\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n      state[key] = val;\n    }\n    return state;\n  }\n}\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(input, pos, lineStart, curLine, type === \"template\", errors);\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = {\n          pos,\n          lineStart,\n          curLine\n        };\n      } else {\n        out += res.ch;\n      }\n      ({\n        pos,\n        lineStart,\n        curLine\n      } = res);\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n    containsInvalid: !!firstInvalidLoc\n  };\n}\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === \"template\") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n  return ch === (type === \"double\" ? 34 : 39);\n}\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case 110:\n      return res(\"\\n\");\n    case 114:\n      return res(\"\\r\");\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n    case 116:\n      return res(\"\\t\");\n    case 98:\n      return res(\"\\b\");\n    case 118:\n      return res(\"\\u000b\");\n    case 102:\n      return res(\"\\f\");\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n    case 10:\n      lineStart = pos;\n      ++curLine;\n    case 8232:\n    case 8233:\n      return res(\"\");\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (octalStr !== \"0\" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n        return res(String.fromCharCode(octal));\n      }\n      return res(String.fromCharCode(ch));\n  }\n}\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return {\n    code: n,\n    pos\n  };\n}\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n    if (code === 95 && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n      if (!allowNumSeparator) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n      ++pos;\n      continue;\n    }\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      if (val <= 9 && bailOnError) {\n        return {\n          n: null,\n          pos\n        };\n      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n  return {\n    n: total,\n    pos\n  };\n}\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf(\"}\", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n  return {\n    code,\n    pos\n  };\n}\nconst _excluded = [\"at\"],\n  _excluded2 = [\"at\"];\nfunction buildPosition(pos, lineStart, curLine) {\n  return new Position(curLine, pos - lineStart, pos);\n}\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n}\nclass Tokenizer extends CommentsParser {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.errorHandlers_readInt = {\n      invalidDigit: (pos, lineStart, curLine, radix) => {\n        if (!this.options.errorRecovery) return false;\n        this.raise(Errors.InvalidDigit, {\n          at: buildPosition(pos, lineStart, curLine),\n          radix\n        });\n        return true;\n      },\n      numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),\n      unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)\n    };\n    this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {\n      invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n      invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)\n    });\n    this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: (pos, lineStart, curLine) => {\n        this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      },\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedString, {\n          at: buildPosition(pos - 1, lineStart, curLine)\n        });\n      }\n    });\n    this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      }\n    });\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n  next() {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  match(type) {\n    return this.state.type === type;\n  }\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n  nextTokenInLineStart() {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n  nextTokenInLineStartSince(pos) {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;\n  }\n  lookaheadInLineCharCode() {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (strict) {\n      this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, {\n        at\n      }));\n      this.state.strictErrors.clear();\n    }\n  }\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(137);\n      return;\n    }\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n  skipBlockComment(commentEnd) {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment(\"*/\");\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            default:\n              break loop;\n          }\n          break;\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule && this.options.annexB) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule && this.options.annexB) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= 48 && next <= 57) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition()\n      });\n    }\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {\n          at: this.state.curPosition()\n        });\n      }\n      this.state.pos += 2;\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(136, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(136, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n    this.finishOp(type, width);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n      return;\n    }\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === 94) {\n        this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n      this.finishOp(51, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(47, 1);\n  }\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n      this.finishOp(52, size);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(48, 1);\n  }\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n        return;\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n        return;\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n        return;\n      case 63:\n        this.readToken_question();\n        return;\n      case 96:\n        this.readTemplateToken();\n        return;\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n      case 47:\n        this.readToken_slash();\n        return;\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n      case 94:\n        this.readToken_caret();\n        return;\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n      case 60:\n        this.readToken_lt();\n        return;\n      case 62:\n        this.readToken_gt();\n        return;\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n      case 126:\n        this.finishOp(36, 1);\n        return;\n      case 64:\n        this.readToken_atSign();\n        return;\n      case 35:\n        this.readToken_numberSign();\n        return;\n      case 92:\n        this.readWord();\n        return;\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code)\n    });\n  }\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n        escaped = ch === 92;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, {\n            at: nextPos()\n          });\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(Errors.MalformedRegExpFlags, {\n          at: nextPos()\n        });\n      } else {\n        break;\n      }\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n    this.finishToken(135, {\n      pattern: content,\n      flags: mods\n    });\n  }\n  readInt(radix, len, forceLen = false, allowNumSeparator = true) {\n    const {\n      n,\n      pos\n    } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);\n    this.state.pos = pos;\n    return n;\n  }\n  readRadixNumber(radix) {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(Errors.InvalidDecimal, {\n        at: startLoc\n      });\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n    if (isBigInt) {\n      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(133, str);\n      return;\n    }\n    this.finishToken(132, val);\n  }\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, {\n        at: this.state.curPosition()\n      });\n    }\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, {\n        at: startLoc\n      });\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos)\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, {\n          at: startLoc\n        });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, {\n          at: startLoc\n        });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n    if (isBigInt) {\n      this.finishToken(133, str);\n      return;\n    }\n    if (isDecimal) {\n      this.finishToken(134, str);\n      return;\n    }\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(132, val);\n  }\n  readCodePoint(throwOnInvalid) {\n    const {\n      code,\n      pos\n    } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);\n    this.state.pos = pos;\n    return code;\n  }\n  readString(quote) {\n    const {\n      str,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(quote === 34 ? \"double\" : \"single\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(131, str);\n  }\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n  readTemplateToken() {\n    const opening = this.input[this.state.pos];\n    const {\n      str,\n      firstInvalidLoc,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(\"template\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);\n    }\n    if (this.input.codePointAt(pos) === 96) {\n      this.finishToken(24, firstInvalidLoc ? null : opening + str + \"`\");\n    } else {\n      this.state.pos++;\n      this.finishToken(25, firstInvalidLoc ? null : opening + str + \"${\");\n    }\n  }\n  recordStrictModeErrors(toParseError, {\n    at\n  }) {\n    const index = at.index;\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, {\n        at\n      });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition()\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, {\n              at: escStart\n            });\n          }\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(130, word);\n    }\n  }\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type)\n      });\n    }\n  }\n  raise(toParseError, raiseProperties) {\n    const {\n        at\n      } = raiseProperties,\n      details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({\n      loc,\n      details\n    });\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n    return error;\n  }\n  raiseOverwrite(toParseError, raiseProperties) {\n    const {\n        at\n      } = raiseProperties,\n      details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return errors[i] = toParseError({\n          loc,\n          details\n        });\n      }\n      if (error.loc.index < pos) break;\n    }\n    return this.raise(toParseError, raiseProperties);\n  }\n  updateContext(prevType) {}\n  unexpected(loc, type) {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc\n    });\n  }\n  expectPlugin(pluginName, loc) {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName]\n    });\n  }\n  expectOnePlugin(pluginNames) {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames\n      });\n    }\n  }\n  errorBuilder(error) {\n    return (pos, lineStart, curLine) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine)\n      });\n    };\n  }\n}\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n}\nclass ClassScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n  usePrivateName(name, loc) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n}\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.declarationErrors = new Map();\n  }\n  recordDeclarationError(ParsingErrorClass, {\n    at\n  }) {\n    const index = at.index;\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(iterator) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\nclass ExpressionScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n  enter(scope) {\n    this.stack.push(scope);\n  }\n  exit() {\n    this.stack.pop();\n  }\n  recordParameterInitializerError(toParseError, {\n    at: node\n  }) {\n    const origin = {\n      at: node.loc.start\n    };\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n  recordArrowParameterBindingError(error, {\n    at: node\n  }) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n    const origin = {\n      at: node.loc.start\n    };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n  recordAsyncArrowParametersError({\n    at\n  }) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {\n          at\n        });\n      }\n      scope = stack[--i];\n    }\n  }\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, {\n        at: loc\n      });\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\nconst PARAM = 0b0000,\n  PARAM_YIELD = 0b0001,\n  PARAM_AWAIT = 0b0010,\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n  exit() {\n    this.stacks.pop();\n  }\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value, enumerable = true) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n    return false;\n  }\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  expectContextual(token, toParseError) {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, {\n          at: this.state.startLoc\n        });\n      }\n      this.unexpected(null, token);\n    }\n  }\n  canInsertSemicolon() {\n    return this.match(137) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n  }\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(Errors.MissingSemicolon, {\n      at: this.state.lastTokEndLoc\n    });\n  }\n  expect(type, loc) {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n      throw error;\n    }\n  }\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n    if (!andThrow) {\n      return hasErrors;\n    }\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc\n      });\n    }\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, {\n        at: doubleProtoLoc\n      });\n    }\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, {\n        at: privateKeyLoc\n      });\n    }\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n}\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n}\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n    return newNode;\n  };\n}\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n  startNodeAt(loc) {\n    return new Node(this, loc.index, loc);\n  }\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.loc.start);\n  }\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n  resetStartLocation(node, startLoc) {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n  resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: ({\n    reservedType\n  }) => `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName\n  }) => `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName\n  }) => `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({\n    enumName\n  }) => `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName\n  }) => `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName\n  }) => `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType\n  }) => `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName\n  }) => `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName\n  }) => `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion\n  }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName\n  }) => `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName\n  }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: Object.assign({\n    message: \"A binding pattern parameter cannot be optional in an implementation signature.\"\n  }, {\n    reasonCode: \"OptionalBindingPattern\"\n  }),\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({\n    reservedType\n  }) => `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion\n  }) => `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n});\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = superClass => class FlowParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n  finishToken(type, val) {\n    if (type !== 131 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n    super.finishToken(type, val);\n  }\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n    super.addComment(comment);\n  }\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(108);\n    if (this.state.lastTokStart > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n        at: moduloLoc\n      });\n    }\n    if (this.eat(10)) {\n      node.value = super.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n    return [type, predicate];\n  }\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(125)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(128)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(129)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(127)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      this.unexpected();\n    }\n  }\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n    if (this.match(131)) {\n      node.id = super.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n      if (this.match(83)) {\n        this.next();\n        if (!this.isContextual(128) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        super.parseImport(bodyNode);\n      } else {\n        this.expectContextual(123, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n      body.push(bodyNode);\n    }\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n            at: bodyElement\n          });\n        }\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(128) || this.isContextual(127)) && !insideModule) {\n        const label = this.state.value;\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n          at: this.state.startLoc,\n          unsupportedExportKind: label,\n          suggestion: exportSuggestions[label]\n        });\n      }\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(129)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(127) || this.isContextual(128) || this.isContextual(129)) {\n        node = this.parseExport(node, null);\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n    this.unexpected();\n  }\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(109);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    const finished = this.flowParseTypeAlias(node);\n    finished.type = \"DeclareTypeAlias\";\n    return finished;\n  }\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    const finished = this.flowParseOpaqueType(node, true);\n    finished.type = \"DeclareOpaqueType\";\n    return finished;\n  }\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n  flowParseInterfaceish(node, isClass) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n    if (isClass) {\n      node.implements = [];\n      node.mixins = [];\n      if (this.eatContextual(115)) {\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n      if (this.eatContextual(111)) {\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(12));\n      }\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node, false);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n        at: this.state.startLoc\n      });\n    }\n  }\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n      at: startLoc,\n      reservedType: word\n    });\n  }\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(128);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.supertype = null;\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n    node.impltype = null;\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, {\n          at: nodeStartLoc\n        });\n      }\n    }\n    return this.finishNode(node, \"TypeParameter\");\n  }\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n    if (this.match(47) || this.match(140)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    let defaultRequired = false;\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(127);\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n  flowParseObjectPropertyKey() {\n    return this.match(132) || this.match(131) ? super.parseExprAtom() : this.parseIdentifier(true);\n  }\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n    } else {\n      node.method = false;\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n      node.value = this.flowParseTypeInitialiser();\n    }\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    this.expect(10);\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n    nodeStart.exact = exact;\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n      if (allowProto && this.isContextual(116)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n      if (allowStatic && this.isContextual(104)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n      const variance = this.flowParseVariance();\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n        if (this.isContextual(98) || this.isContextual(103)) {\n          const lookahead = this.lookahead();\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n      this.flowObjectTypeSemicolon();\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n          at: inexactStartLoc\n        });\n      }\n    }\n    this.expect(endDelim);\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, {\n            at: this.state.lastTokStartLoc\n          });\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, {\n            at: variance\n          });\n        }\n        return null;\n      }\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, {\n          at: this.state.lastTokStartLoc\n        });\n      }\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, {\n          at: variance\n        });\n      }\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, {\n            at: node.value.this\n          });\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n        if (this.eat(17)) {\n          optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n        at: property.value.this\n      });\n    }\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: property\n      });\n    }\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: property\n      });\n    }\n  }\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n  flowParseQualifiedTypeIdentifier(startLoc, id) {\n    var _startLoc;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n    return node;\n  }\n  flowParseGenericType(startLoc, id) {\n    const node = this.startNodeAt(startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node\n        });\n      }\n      name = this.parseIdentifier(isThis);\n      if (this.eat(17)) {\n        optional = true;\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n            at: node\n          });\n        }\n      }\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n  flowIdentToTypeAnnotation(startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startLoc, id);\n    }\n  }\n  flowParsePrimaryType() {\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n      case 47:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      case 10:\n        this.next();\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      case 131:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n          if (this.match(132)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n          if (this.match(133)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n            at: this.state.startLoc\n          });\n        }\n        this.unexpected();\n        return;\n      case 132:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n      case 133:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n      case 87:\n        return this.flowParseTypeofType();\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(127)) {\n            return this.flowParseInterfaceType();\n          }\n          return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());\n        }\n    }\n    this.unexpected();\n  }\n  flowParsePostfixType() {\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n    return type;\n  }\n  flowParsePrefixType() {\n    const node = this.startNode();\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n    return param;\n  }\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 130 && this.state.value === \"_\") {\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n    return ident;\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  flowParseVariance() {\n    let variance = null;\n    if (this.match(53)) {\n      variance = this.startNode();\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n      this.next();\n      return this.finishNode(variance, \"Variance\");\n    }\n    return variance;\n  }\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n      return;\n    }\n    super.parseFunctionBody(node, false, isMethod);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  parseStatementLike(flags) {\n    if (this.state.strict && this.isContextual(127)) {\n      const lookahead = this.lookahead();\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(124)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    const stmt = super.parseStatementLike(flags);\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n    return stmt;\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n    return super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {\n      return !this.state.containsEsc;\n    }\n    return super.shouldParseExportDeclaration();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {\n      return this.state.containsEsc;\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(124)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, {\n          at: state.startLoc\n        });\n      }\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n    while (stack.length !== 0) {\n      const node = stack.pop();\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n  finishArrowValidation(node) {\n    var _node$extra;\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n    return result;\n  }\n  parseParenItem(node, startLoc) {\n    node = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n    return node;\n  }\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n    super.assertModuleNodeAllowed(node);\n  }\n  parseExportDeclaration(node) {\n    if (this.isContextual(128)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        super.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(129)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(127)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(124)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n  eatExportStar(node) {\n    if (super.eatExportStar(node)) return true;\n    if (this.isContextual(128) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n    return hasNamespace;\n  }\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n    if (this.isContextual(123)) {\n      if (super.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      member.declare = true;\n    }\n    super.parseClassMember(classBody, member, state);\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, {\n          at: startLoc\n        });\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, {\n          at: member.value\n        });\n      }\n    }\n  }\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(Errors.InvalidIdentifier, {\n        at: this.state.curPosition(),\n        identifierName: fullWord\n      });\n    }\n    this.finishToken(130, fullWord);\n  }\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 123 && next === 124) {\n      this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        this.finishOp(18, 2);\n      } else {\n        this.finishOp(17, 1);\n      }\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      this.readIterator();\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    if (!isLHS && node.type === \"AssignmentExpression\" && node.left.type === \"TypeCastExpression\") {\n      node.left = this.typeCastToParameter(node.left);\n    }\n    super.toAssignable(node, isLHS);\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n      const expr = exprList[i];\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, {\n          at: expr.typeAnnotation\n        });\n      }\n    }\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n    return node;\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"TypeCastExpression\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassPrivateProperty(node);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    if (method.params && isConstructor) {\n      const params = method.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    }\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    if (this.isContextual(111)) {\n      this.next();\n      const implemented = node.implements = [];\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length > 0) {\n      const param = params[0];\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n          at: param\n        });\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n          at: param\n        });\n      }\n    }\n  }\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n    delete prop.variance;\n    let typeParameters;\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n    const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    if (typeParameters) {\n      (result.value || result).typeParameters = typeParameters;\n    }\n    return result;\n  }\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n          at: param\n        });\n      }\n      param.optional = true;\n    }\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, {\n        at: param\n      });\n    }\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, {\n        at: param\n      });\n    }\n    this.resetEndLocation(param);\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, {\n        at: node.typeAnnotation\n      });\n    }\n    return node;\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(FlowErrors.ImportReflectionHasImportType, {\n        at: node.specifiers[0].loc.start\n      });\n    }\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(128)) {\n      if (!isExport) return true;\n      const ch = this.lookaheadCharCode();\n      return ch === 123 || ch === 42;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      if (!phase && this.match(65)) {\n        return;\n      }\n      node.exportKind = phase === \"type\" ? phase : \"value\";\n    } else {\n      if (phase === \"type\" && this.match(55)) this.unexpected();\n      node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n    let isBinding = false;\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, {\n            at: specifier,\n            importName: firstIdent.value\n          });\n        }\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n        at: specifier\n      });\n    }\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n  parseFunctionParams(node, isConstructor) {\n    const kind = node.kind;\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n    let state = null;\n    let jsx;\n    if (this.hasPlugin(\"jsx\") && (this.match(140) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n              at: typeParameters\n            });\n          }\n          return arrow.node;\n        }\n        arrowExpression = arrow.node;\n      }\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n        at: typeParameters\n      });\n    }\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n    return super.parseArrow(node);\n  }\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node.params[i]\n        });\n      }\n    }\n    super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.arguments = super.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n      throw arrow.error || result.error;\n    }\n    return super.parseSubscripts(base, startLoc, noCalls);\n  }\n  parseSubscript(base, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = super.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) {\n          node.optional = false;\n        }\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, subscriptState);\n  }\n  parseNewCallee(node) {\n    super.parseNewCallee(node);\n    let targs = null;\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n    node.typeArguments = targs;\n  }\n  parseAsyncArrowWithTypeParameters(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.parseFunctionParams(node, false);\n    if (!this.parseArrow(node)) return;\n    return super.parseArrowExpression(node, undefined, true);\n  }\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n    super.readToken_mult_modulo(code);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n    super.readToken_pipe_amp(code);\n  }\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, {\n        at: this.state.curPosition()\n      });\n    }\n    return fileNode;\n  }\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, {\n          at: this.state.startLoc\n        });\n      }\n      this.hasFlowCommentCompletion();\n      const commentSkip = this.skipFlowComment();\n      if (commentSkip) {\n        this.state.pos += commentSkip;\n        this.state.hasFlowComment = true;\n      }\n      return;\n    }\n    return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n  }\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n    return false;\n  }\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n  }\n  flowEnumErrorBooleanMemberNotInitialized(loc, {\n    enumName,\n    memberName\n  }) {\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n      at: loc,\n      memberName,\n      enumName\n    });\n  }\n  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({\n      at: loc\n    }, enumContext));\n  }\n  flowEnumErrorNumberMemberNotInitialized(loc, {\n    enumName,\n    memberName\n  }) {\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n      at: loc,\n      enumName,\n      memberName\n    });\n  }\n  flowEnumErrorStringMemberInconsistentlyInitailized(node, {\n    enumName\n  }) {\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n      at: node,\n      enumName\n    });\n  }\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n    const endOfInit = () => this.match(12) || this.match(8);\n    switch (this.state.type) {\n      case 132:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 131:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n    if (explicitType === null) {\n      return;\n    }\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n      if (memberName === \"\") {\n        continue;\n      }\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, {\n          at: id,\n          memberName,\n          suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n          enumName\n        });\n      }\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, {\n          at: id,\n          memberName,\n          enumName\n        });\n      }\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n      return initializedMembers;\n    }\n  }\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (!this.eatContextual(101)) return null;\n    if (!tokenIsIdentifier(this.state.type)) {\n      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n        at: this.state.startLoc,\n        enumName\n      });\n    }\n    const {\n      value\n    } = this.state;\n    this.next();\n    if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n      this.raise(FlowErrors.EnumInvalidExplicitType, {\n        at: this.state.startLoc,\n        enumName,\n        invalidEnumType: value\n      });\n    }\n    return value;\n  }\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n    return false;\n  }\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n};\nconst entities = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({\n    openingTagName\n  }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity\n  }) => `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\nvar jsx = superClass => class JSXParserMixin extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, {\n          at: this.state.startLoc\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              this.finishToken(140);\n            } else {\n              super.getTokenFromCode(ch);\n            }\n            return;\n          }\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(139, out);\n          return;\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n      }\n    }\n  }\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(131, out);\n  }\n  jsxReadEntity() {\n    const startPos = ++this.state.pos;\n    if (this.codePointAtPos(this.state.pos) === 35) {\n      ++this.state.pos;\n      let radix = 10;\n      if (this.codePointAtPos(this.state.pos) === 120) {\n        radix = 16;\n        ++this.state.pos;\n      }\n      const codePoint = this.readInt(radix, undefined, false, \"bail\");\n      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n        ++this.state.pos;\n        return String.fromCodePoint(codePoint);\n      }\n    } else {\n      let count = 0;\n      let semi = false;\n      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {\n        ++this.state.pos;\n      }\n      if (semi) {\n        const desc = this.input.slice(startPos, this.state.pos);\n        const entity = entities[desc];\n        ++this.state.pos;\n        if (entity) {\n          return entity;\n        }\n      }\n    }\n    this.state.pos = startPos;\n    return \"&\";\n  }\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n    this.finishToken(138, this.input.slice(start, this.state.pos));\n  }\n  jsxParseIdentifier() {\n    const node = this.startNode();\n    if (this.match(138)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n  jsxParseNamespacedName() {\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n  jsxParseElementName() {\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n    return node;\n  }\n  jsxParseAttributeValue() {\n    let node;\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, {\n            at: node\n          });\n        }\n        return node;\n      case 140:\n      case 131:\n        return this.parseExprAtom();\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, {\n          at: this.state.startLoc\n        });\n    }\n  }\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_expr);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n    this.setContext(previousContext);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n  jsxParseAttribute() {\n    const node = this.startNode();\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n  jsxParseOpeningElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(141)) {\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n    while (!this.match(56) && !this.match(141)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(141);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n  jsxParseClosingElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(141)) {\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    this.expect(141);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n  jsxParseElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startLoc);\n    let closingElement = null;\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 140:\n            startLoc = this.state.startLoc;\n            this.next();\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startLoc);\n              break contents;\n            }\n            children.push(this.jsxParseElementAt(startLoc));\n            break;\n          case 139:\n            children.push(this.parseExprAtom());\n            break;\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n              break;\n            }\n          default:\n            this.unexpected();\n        }\n      }\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, {\n          at: closingElement\n        });\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, {\n          at: closingElement,\n          openingTagName: getQualifiedJSXName(openingElement.name)\n        });\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name)\n          });\n        }\n      }\n    }\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n    node.children = children;\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n        at: this.state.startLoc\n      });\n    }\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n  jsxParseElement() {\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startLoc);\n  }\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(139)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(140)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(140);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n  getTokenFromCode(code) {\n    const context = this.curContext();\n    if (context === types.j_expr) {\n      this.jsxReadToken();\n      return;\n    }\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        this.jsxReadWord();\n        return;\n      }\n      if (code === 62) {\n        ++this.state.pos;\n        this.finishToken(141);\n        return;\n      }\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        this.jsxReadString(code);\n        return;\n      }\n    }\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      this.finishToken(140);\n      return;\n    }\n    super.getTokenFromCode(code);\n  }\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n    if (type === 56 && prevType === 140) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 140) {\n      context.push(types.j_oTag);\n    } else if (type === 141) {\n      const out = context[context.length - 1];\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n};\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n}\nclass TypeScriptScopeHandler extends ScopeHandler {\n  constructor(...args) {\n    super(...args);\n    this.importsStack = [];\n  }\n  createScope(flags) {\n    this.importsStack.push(new Set());\n    return new TypeScriptScope(flags);\n  }\n  enter(flags) {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n    super.enter(flags);\n  }\n  exit() {\n    const flags = super.exit();\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n    return flags;\n  }\n  hasImport(name, allowShadow) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n  declareName(name, bindingType, loc) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    if (this.hasImport(name)) return;\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n    super.checkLocalExport(id);\n  }\n}\nconst getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, {\n          at: node\n        });\n      }\n    }\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc\n            });\n          }\n        }\n        break;\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n          this.toAssignable(value, isLHS);\n          break;\n        }\n      case \"SpreadElement\":\n        {\n          throw new Error(\"Internal @babel/parser error (this is a bug, please report it).\" + \" SpreadElement should be converted by .toAssignable's caller.\");\n        }\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, {\n            at: node.left.loc.end\n          });\n        }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, false);\n      this.toAssignable(arg, isLHS);\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, {\n          at: prop\n        });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    const end = exprList.length - 1;\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, {\n            at: elt\n          });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, {\n            at: trailingCommaLoc\n          });\n        }\n      }\n    }\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n      default:\n        return false;\n    }\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n  parseSpread(refExpressionErrors) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, 1);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n    return this.parseIdentifier();\n  }\n  parseBindingList(close, closeCharCode, flags) {\n    const allowEmpty = flags & 1;\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc\n          });\n        }\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      startLoc\n    } = this.state;\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === 136) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(prop, startLoc, false, false, true, false);\n  }\n  parseAssignableListItem(flags, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  parseAssignableListItemTypes(param, flags) {\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    var _startLoc, _left;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn$1({\n      AssignmentPattern: \"left\",\n      RestElement: \"argument\",\n      ObjectProperty: \"value\",\n      ParenthesizedExpression: \"expression\",\n      ArrayPattern: \"elements\",\n      ObjectPattern: \"properties\"\n    }, type);\n  }\n  checkLVal(expression, {\n    in: ancestor,\n    binding = BIND_NONE,\n    checkClashes = false,\n    strictModeChanged = false,\n    hasParenthesizedAncestor = false\n  }) {\n    var _expression$extra;\n    const type = expression.type;\n    if (this.isObjectMethod(expression)) return;\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, {\n          at: expression\n        });\n      }\n      return;\n    }\n    if (type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged);\n      const {\n        name\n      } = expression;\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, {\n            at: expression\n          });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n      return;\n    }\n    const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === \"AssignmentExpression\", binding);\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor\n      });\n      return;\n    }\n    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor = type === \"ArrayPattern\" || type === \"ObjectPattern\" || type === \"ParenthesizedExpression\" ? {\n      type\n    } : ancestor;\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression\n        });\n      }\n    }\n  }\n  checkIdentifier(at, bindingType, strictModeChanged = false) {\n    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, {\n          at,\n          referenceName: at.name\n        });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name\n        });\n      }\n    }\n    if (bindingType & BIND_FLAGS_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, {\n        at\n      });\n    }\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n  declareNameFromIdentifier(identifier, binding) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, {\n          at: node\n        });\n    }\n  }\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {\n      at: this.state.startLoc\n    });\n    return true;\n  }\n}\nconst getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({\n    methodName\n  }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName\n  }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional: \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({\n    kind\n  }) => `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: ({\n    modifier\n  }) => `Accessibility modifier already seen.`,\n  DuplicateModifier: ({\n    modifier\n  }) => `Duplicate modifier: '${modifier}'.`,\n  EmptyHeritageClauseType: ({\n    token\n  }) => `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers\n  }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier\n  }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext: \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({\n    modifier\n  }) => `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({\n    modifier\n  }) => `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier\n  }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers\n  }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression: \"Invalid property access after an instantiation expression. \" + \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier\n  }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName\n  }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType: \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({\n    type\n  }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`\n});\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\nfunction tsIsVarianceAnnotations(modifier) {\n  return modifier === \"in\" || modifier === \"out\";\n}\nvar typescript = superClass => class TypeScriptParserMixin extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\"const\", \"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n    this.tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    });\n    this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n  }\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(136) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {\n      return undefined;\n    }\n    const modifier = this.state.value;\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n    return undefined;\n  }\n  tsParseModifiers({\n    allowedModifiers,\n    disallowedModifiers,\n    stopOnStartOfClassStaticBlock,\n    errorTemplate = TSErrors.InvalidModifierOnTypeMember\n  }, modified) {\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, {\n          at: loc,\n          orderedModifiers: [before, after]\n        });\n      }\n    };\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, {\n          at: loc,\n          modifiers: [mod1, mod2]\n        });\n      }\n    };\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else if (tsIsVarianceAnnotations(modifier)) {\n        if (modified[modifier]) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        }\n        modified[modifier] = true;\n        enforceOrder(startLoc, modifier, \"in\", \"out\");\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n        modified[modifier] = true;\n      }\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(errorTemplate, {\n          at: startLoc,\n          modifier\n        });\n      }\n    }\n  }\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n      case \"HeritageClauseElement\":\n        return this.match(5);\n      case \"TupleElementTypes\":\n        return this.match(3);\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n  }\n  tsParseList(kind, parseElement) {\n    const result = [];\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n    return result;\n  }\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      trailingCommaPos = -1;\n      const element = parseElement();\n      if (element == null) {\n        return undefined;\n      }\n      result.push(element);\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      if (expectSuccess) {\n        this.expect(12);\n      }\n      return undefined;\n    }\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n    return result;\n  }\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n    return result;\n  }\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n    if (!this.match(131)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, {\n        at: this.state.startLoc\n      });\n    }\n    node.argument = super.parseExprAtom();\n    this.expect(11);\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName();\n    }\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSImportType\");\n  }\n  tsParseEntityName(allowReservedWords = true) {\n    let entity = this.parseIdentifier(allowReservedWords);\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n    return entity;\n  }\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName();\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName();\n    }\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n  tsParseTypeParameter(parseModifiers) {\n    const node = this.startNode();\n    parseModifiers(node);\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n  tsTryParseTypeParameters(parseModifiers) {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters(parseModifiers);\n    }\n  }\n  tsParseTypeParameters(parseModifiers) {\n    const node = this.startNode();\n    if (this.match(47) || this.match(140)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, {\n        at: node\n      });\n    }\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n  tsParseBindingListForSignature() {\n    const list = super.parseBindingList(11, 41, 2);\n    for (const pattern of list) {\n      const {\n        type\n      } = pattern;\n      if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n          at: pattern,\n          type\n        });\n      }\n    }\n    return list;\n  }\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n    return false;\n  }\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return;\n    }\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, {\n          at: node\n        });\n      }\n      const method = nodeAny;\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n          at: this.state.curPosition()\n        });\n      }\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(Errors.BadGetterArity, {\n            at: this.state.curPosition()\n          });\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(Errors.BadSetterArity, {\n            at: this.state.curPosition()\n          });\n        } else {\n          const firstParameter = method[paramsKey][0];\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n              at: this.state.curPosition()\n            });\n          }\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n            at: method[returnTypeKey]\n          });\n        }\n      } else {\n        method.kind = \"method\";\n      }\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n  tsParseTypeMember() {\n    const node = this.startNode();\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n    this.tsParseModifiers({\n      allowedModifiers: [\"readonly\"],\n      disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n    }, node);\n    const idx = this.tsTryParseIndexSignature(node);\n    if (idx) {\n      return idx;\n    }\n    super.parsePropertyName(node);\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      super.parsePropertyName(node);\n    }\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n  tsIsStartOfMappedType() {\n    this.next();\n    if (this.eat(53)) {\n      return this.isContextual(120);\n    }\n    if (this.isContextual(120)) {\n      this.next();\n    }\n    if (!this.match(0)) {\n      return false;\n    }\n    this.next();\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n    this.next();\n    return this.match(58);\n  }\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(58);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(120);\n    } else if (this.eatContextual(120)) {\n      node.readonly = true;\n    }\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n      const {\n        type\n      } = elementNode;\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, {\n          at: elementNode\n        });\n      }\n      seenOptionalElement || (seenOptionalElement = type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\");\n      let checkType = type;\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        checkType = elementNode.type;\n      }\n      const isLabeled = checkType === \"TSNamedTupleMember\";\n      (_labeledElements = labeledElements) != null ? _labeledElements : labeledElements = isLabeled;\n      if (labeledElements !== isLabeled) {\n        this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n          at: elementNode\n        });\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n  tsParseTupleElementType() {\n    const {\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let labeled;\n    let label;\n    let optional;\n    let type;\n    const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n    const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n    if (chAfterWord === 58) {\n      labeled = true;\n      optional = false;\n      label = this.parseIdentifier(true);\n      this.expect(14);\n      type = this.tsParseType();\n    } else if (chAfterWord === 63) {\n      optional = true;\n      const startLoc = this.state.startLoc;\n      const wordName = this.state.value;\n      const typeOrLabel = this.tsParseNonArrayType();\n      if (this.lookaheadCharCode() === 58) {\n        labeled = true;\n        label = this.createIdentifier(this.startNodeAt(startLoc), wordName);\n        this.expect(17);\n        this.expect(14);\n        type = this.tsParseType();\n      } else {\n        labeled = false;\n        type = typeOrLabel;\n        this.expect(17);\n      }\n    } else {\n      type = this.tsParseType();\n      optional = this.eat(17);\n      labeled = this.eat(14);\n    }\n    if (labeled) {\n      let labeledNode;\n      if (label) {\n        labeledNode = this.startNodeAtNode(label);\n        labeledNode.optional = optional;\n        labeledNode.label = label;\n        labeledNode.elementType = type;\n        if (this.eat(17)) {\n          labeledNode.optional = true;\n          this.raise(TSErrors.TupleOptionalAfterType, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n      } else {\n        labeledNode = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n        this.raise(TSErrors.InvalidTupleMemberLabel, {\n          at: type\n        });\n        labeledNode.label = type;\n        labeledNode.elementType = this.tsParseType();\n      }\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n    if (rest) {\n      const restNode = this.startNodeAt(startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n    return type;\n  }\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));\n    return this.finishNode(node, type);\n  }\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n    switch (this.state.type) {\n      case 132:\n      case 133:\n      case 131:\n      case 85:\n      case 86:\n        node.literal = super.parseExprAtom();\n        break;\n      default:\n        this.unexpected();\n    }\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = super.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n    if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 131:\n      case 132:\n      case 133:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n          if (nextToken.type !== 132 && nextToken.type !== 133) {\n            this.unexpected();\n          }\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n        break;\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n      case 87:\n        return this.tsParseTypeQuery();\n      case 83:\n        return this.tsParseImportType();\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n      case 0:\n        return this.tsParseTupleType();\n      case 10:\n        return this.tsParseParenthesizedType();\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n      default:\n        {\n          const {\n            type\n          } = this.state;\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n    this.unexpected();\n  }\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n    return type;\n  }\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, {\n          at: node\n        });\n    }\n  }\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(113);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n  tsParseConstraintForInferType() {\n    if (this.eat(81)) {\n      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());\n      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {\n        return constraint;\n      }\n    }\n  }\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(113) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());\n  }\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n    if (this.match(5)) {\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        this.parseObjectLike(8, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused) {\n        return false;\n      }\n    }\n    if (this.match(0)) {\n      this.next();\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        super.parseBindingList(3, 93, 1);\n        return errors.length === previousErrorCount;\n      } catch (_unused2) {\n        return false;\n      }\n    }\n    return false;\n  }\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n      if (this.match(11)) {\n        this.next();\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n  }\n  tsTryParseTypeAnnotation() {\n    if (this.match(14)) {\n      return this.tsParseTypeAnnotation();\n    }\n  }\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n    if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 107) {\n      return false;\n    }\n    const containsEsc = this.state.containsEsc;\n    this.next();\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n    if (containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.lastTokStartLoc,\n        reservedWord: \"asserts\"\n      });\n    }\n    return true;\n  }\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());\n    this.expect(17);\n    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    this.expect(14);\n    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n  isAbstractConstructorSignature() {\n    return this.isContextual(122) && this.lookahead().type === 77;\n  }\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n    return this.tsParseUnionTypeOrHigher();\n  }\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, {\n        at: this.state.startLoc\n      });\n    }\n    const node = this.startNode();\n    node.typeAnnotation = this.tsInType(() => {\n      this.next();\n      return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();\n    });\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n  tsParseHeritageClause(token) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", () => {\n      const node = this.startNode();\n      node.expression = this.tsParseEntityName();\n      if (this.match(47)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    });\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, {\n        at: originalStartLoc,\n        token\n      });\n    }\n    return delimitedList;\n  }\n  tsParseInterfaceDeclaration(node, properties = {}) {\n    if (this.hasFollowingLineBreak()) return null;\n    this.expectContextual(127);\n    if (properties.declare) node.declare = true;\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, {\n        at: this.state.startLoc\n      });\n    }\n    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_TS_TYPE);\n    node.typeAnnotation = this.tsInType(() => {\n      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);\n      this.expect(29);\n      if (this.isContextual(112) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n  tsInDisallowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsInAllowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = false;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsEatThenParseType(token) {\n    if (this.match(token)) {\n      return this.tsNextThenParseType();\n    }\n  }\n  tsExpectThenParseType(token) {\n    return this.tsInType(() => {\n      this.expect(token);\n      return this.tsParseType();\n    });\n  }\n  tsNextThenParseType() {\n    return this.tsInType(() => {\n      this.next();\n      return this.tsParseType();\n    });\n  }\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(131) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);\n    if (this.eat(29)) {\n      node.initializer = super.parseMaybeAssignAllowIn();\n    }\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n  tsParseEnumDeclaration(node, properties = {}) {\n    if (properties.const) node.const = true;\n    if (properties.declare) node.declare = true;\n    this.expectContextual(124);\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n    if (!nested) {\n      this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n    }\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(110)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(131)) {\n      node.id = super.parseStringLiteral(this.state.value);\n    } else {\n      this.unexpected();\n    }\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {\n    node.isExport = isExport || false;\n    node.id = maybeDefaultIdentifier || this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, {\n        at: moduleReference\n      });\n    }\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n  tsIsExternalModuleReference() {\n    return this.isContextual(117) && this.lookaheadCharCode() === 40;\n  }\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(117);\n    this.expect(10);\n    if (!this.match(131)) {\n      this.unexpected();\n    }\n    node.expression = super.parseExprAtom();\n    this.expect(11);\n    this.sawUnambiguousESM = true;\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n    if (result !== undefined && result !== false) {\n      return result;\n    }\n    this.state = state;\n  }\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n    let startType = this.state.type;\n    let kind;\n    if (this.isContextual(99)) {\n      startType = 74;\n      kind = \"let\";\n    }\n    return this.tsInAmbientContext(() => {\n      switch (startType) {\n        case 68:\n          nany.declare = true;\n          return super.parseFunctionStatement(nany, false, false);\n        case 80:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n        case 124:\n          return this.tsParseEnumDeclaration(nany, {\n            declare: true\n          });\n        case 110:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        case 75:\n        case 74:\n          if (!this.match(75) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n          this.expect(75);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true\n          });\n        case 127:\n          {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true\n            });\n            if (result) return result;\n          }\n        default:\n          if (tokenIsIdentifier(startType)) {\n            return this.tsParseDeclaration(nany, this.state.value, true, null);\n          }\n      }\n    });\n  }\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);\n  }\n  tsParseExpressionStatement(node, expr, decorators) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n        break;\n      default:\n        return this.tsParseDeclaration(node, expr.name, false, decorators);\n    }\n  }\n  tsParseDeclaration(node, value, next, decorators) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node, decorators);\n        }\n        break;\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(131)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n        break;\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n        break;\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n        break;\n    }\n  }\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n    return !this.isLineTerminator();\n  }\n  tsTryParseGenericAsyncArrowFunction(startLoc) {\n    if (!this.match(47)) return;\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startLoc);\n      node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    if (!res) return;\n    return super.parseArrowExpression(res, null, true);\n  }\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) return;\n    return this.tsParseTypeArguments();\n  }\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, {\n        at: node\n      });\n    } else if (!this.state.inType && this.curContext() === types.brace) {\n      this.reScan_lt_gt();\n    }\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n  parseAssignableListItem(flags, decorators) {\n    const startLoc = this.state.startLoc;\n    const modified = {};\n    this.tsParseModifiers({\n      allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n    }, modified);\n    const accessibility = modified.accessibility;\n    const override = modified.override;\n    const readonly = modified.readonly;\n    if (!(flags & 4) && (accessibility || readonly || override)) {\n      this.raise(TSErrors.UnexpectedParameterModifier, {\n        at: startLoc\n      });\n    }\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startLoc);\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n          at: pp\n        });\n      }\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  isSimpleParameter(node) {\n    return node.type === \"TSParameterProperty\" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);\n  }\n  tsDisallowOptionalPattern(node) {\n    for (const param of node.params) {\n      if (param.type !== \"Identifier\" && param.optional && !this.state.isAmbientContext) {\n        this.raise(TSErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n    }\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    this.tsDisallowOptionalPattern(node);\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      return this.finishNode(node, bodilessType);\n    }\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, {\n        at: node\n      });\n      if (node.declare) {\n        return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n      }\n    }\n    this.tsDisallowOptionalPattern(node);\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(node);\n    }\n  }\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, {\n          at: node.typeAnnotation\n        });\n      }\n    });\n  }\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n    let isOptionalCall = false;\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n        if (!typeArguments) return;\n        if (isOptionalCall && !this.match(10)) {\n          missingParenErrorLoc = this.state.curPosition();\n          return;\n        }\n        if (tokenIsTemplate(this.state.type)) {\n          const result = super.parseTaggedTemplateExpression(base, startLoc, state);\n          result.typeParameters = typeArguments;\n          return result;\n        }\n        if (!noCalls && this.eat(10)) {\n          const node = this.startNodeAt(startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(11, false);\n          this.tsCheckForInvalidTypeCasts(node.arguments);\n          node.typeParameters = typeArguments;\n          if (state.optionalChainMember) {\n            node.optional = isOptionalCall;\n          }\n          return this.finishCallExpression(node, state.optionalChainMember);\n        }\n        const tokenType = this.state.type;\n        if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {\n          return;\n        }\n        const node = this.startNodeAt(startLoc);\n        node.expression = base;\n        node.typeParameters = typeArguments;\n        return this.finishNode(node, \"TSInstantiationExpression\");\n      });\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n      if (result) {\n        if (result.type === \"TSInstantiationExpression\" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {\n          this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, {\n            at: this.state.startLoc\n          });\n        }\n        return result;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, state);\n  }\n  parseNewCallee(node) {\n    var _callee$extra;\n    super.parseNewCallee(node);\n    const {\n      callee\n    } = node;\n    if (callee.type === \"TSInstantiationExpression\" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {\n      node.typeParameters = callee.typeParameters;\n      node.callee = callee.expression;\n    }\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    let isSatisfies;\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(118)))) {\n      const node = this.startNodeAt(leftStartLoc);\n      node.expression = left;\n      node.typeAnnotation = this.tsInType(() => {\n        this.next();\n        if (this.match(75)) {\n          if (isSatisfies) {\n            this.raise(Errors.UnexpectedKeyword, {\n              at: this.state.startLoc,\n              keyword: \"const\"\n            });\n          }\n          return this.tsParseTypeReference();\n        }\n        return this.tsParseType();\n      });\n      this.finishNode(node, isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartLoc, minPrec);\n    }\n    return super.parseExprOp(left, leftStartLoc, minPrec);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (!this.state.isAmbientContext) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(TSErrors.ImportReflectionHasImportType, {\n        at: node.specifiers[0].loc.start\n      });\n    }\n  }\n  checkDuplicateExports() {}\n  isPotentialImportPhase(isExport) {\n    if (super.isPotentialImportPhase(isExport)) return true;\n    if (this.isContextual(128)) {\n      const ch = this.lookaheadCharCode();\n      return isExport ? ch === 123 || ch === 42 : ch !== 61;\n    }\n    return !isExport && this.isContextual(87);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    super.applyImportPhase(node, isExport, phase, loc);\n    if (isExport) {\n      node.exportKind = phase === \"type\" ? \"type\" : \"value\";\n    } else {\n      node.importKind = phase === \"type\" || phase === \"typeof\" ? phase : \"value\";\n    }\n  }\n  parseImport(node) {\n    if (this.match(131)) {\n      node.importKind = \"value\";\n      return super.parseImport(node);\n    }\n    let importNode;\n    if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {\n      node.importKind = \"value\";\n      return this.tsParseImportEqualsDeclaration(node);\n    } else if (this.isContextual(128)) {\n      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n      if (this.lookaheadCharCode() === 61) {\n        return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);\n      } else {\n        importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);\n      }\n    } else {\n      importNode = super.parseImport(node);\n    }\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n        at: importNode\n      });\n    }\n    return importNode;\n  }\n  parseExport(node, decorators) {\n    if (this.match(83)) {\n      this.next();\n      let maybeDefaultIdentifier = null;\n      if (this.isContextual(128) && this.isPotentialImportPhase(false)) {\n        maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);\n      } else {\n        node.importKind = \"value\";\n      }\n      return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = super.parseExpression();\n      this.semicolon();\n      this.sawUnambiguousESM = true;\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(126);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      return super.parseExport(node, decorators);\n    }\n  }\n  isAbstractClass() {\n    return this.isContextual(122) && this.lookahead().type === 80;\n  }\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      return this.parseClass(cls, true, true);\n    }\n    if (this.match(127)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    const {\n      isAmbientContext\n    } = this.state;\n    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);\n    if (!isAmbientContext) return declaration;\n    for (const {\n      id,\n      init\n    } of declaration.declarations) {\n      if (!init) continue;\n      if (kind !== \"const\" || !!id.typeAnnotation) {\n        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n          at: init\n        });\n      } else if (!isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))) {\n        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {\n          at: init\n        });\n      }\n    }\n    return declaration;\n  }\n  parseStatementContent(flags, decorators) {\n    if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n      const node = this.startNode();\n      this.expect(75);\n      return this.tsParseEnumDeclaration(node, {\n        const: true\n      });\n    }\n    if (this.isContextual(124)) {\n      return this.tsParseEnumDeclaration(this.startNode());\n    }\n    if (this.isContextual(127)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseStatementContent(flags, decorators);\n  }\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n      return !!member[modifier];\n    });\n  }\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(104) && this.lookaheadCharCode() === 123;\n  }\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers({\n      allowedModifiers: modifiers,\n      disallowedModifiers: [\"in\", \"out\"],\n      stopOnStartOfClassStaticBlock: true,\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    }, member);\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n            at: this.state.curPosition()\n          });\n        }\n        super.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n    if (idx) {\n      classBody.body.push(idx);\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, {\n          at: member\n        });\n      }\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, {\n          at: member,\n          modifier: member.accessibility\n        });\n      }\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, {\n          at: member\n        });\n      }\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, {\n          at: member\n        });\n      }\n      return;\n    }\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n        at: member\n      });\n    }\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, {\n          at: member\n        });\n      }\n    }\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, {\n        at: methodOrProp\n      });\n    }\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, {\n        at: methodOrProp\n      });\n    }\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;\n    return decl || super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n    const result = this.tryParse(() => super.parseConditional(expr, startLoc));\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n      return expr;\n    }\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  parseParenItem(node, startLoc) {\n    node = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n    return node;\n  }\n  parseExportDeclaration(node) {\n    if (!this.state.isAmbientContext && this.isContextual(123)) {\n      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n    }\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(123);\n    if (isDeclare && (this.isContextual(123) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n        at: this.state.startLoc\n      });\n    }\n    const isIdentifier = tokenIsIdentifier(this.state.type);\n    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);\n    if (!declaration) return null;\n    if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n      node.exportKind = \"type\";\n    }\n    if (isDeclare) {\n      this.resetStartLocation(declaration, startLoc);\n      declaration.declare = true;\n    }\n    return declaration;\n  }\n  parseClassId(node, isStatement, optionalId, bindingType) {\n    if ((!isStatement || optionalId) && this.isContextual(111)) {\n      return;\n    }\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional) {\n      if (this.eat(35)) {\n        node.definite = true;\n      } else if (this.eat(17)) {\n        node.optional = true;\n      }\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n        at: this.state.startLoc\n      });\n    }\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, {\n        at: this.state.startLoc,\n        propertyName: key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n      });\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, {\n        at: node\n      });\n    }\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, {\n        at: node,\n        modifier: node.accessibility\n      });\n    }\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n  parseClassAccessorProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (node.optional) {\n      this.raise(TSErrors.AccessorCannotBeOptional, {\n        at: node\n      });\n    }\n    return super.parseClassAccessorProperty(node);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, {\n        at: typeParameters\n      });\n    }\n    const {\n      declare = false,\n      kind\n    } = method;\n    if (declare && (kind === \"get\" || kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, {\n        at: method,\n        kind\n      });\n    }\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n    if (this.eatContextual(111)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) prop.typeParameters = typeParameters;\n    return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n  }\n  parseFunctionParams(node, isConstructor) {\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, isConstructor);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;\n    let state;\n    let jsx;\n    let typeCast;\n    if (this.hasPlugin(\"jsx\") && (this.match(140) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n    if (!state || state === this.state) state = this.state.clone();\n    let typeParameters;\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n      typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n      const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n    throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);\n  }\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n    if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, {\n        at: node\n      });\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    }\n    return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n    return super.parseArrow(node);\n  }\n  parseAssignableListItemTypes(param, flags) {\n    if (!(flags & 2)) return param;\n    if (this.eat(17)) {\n      param.optional = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n      case \"TSParameterProperty\":\n        return true;\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.toAssignableParenthesizedExpression(node, isLHS);\n        break;\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        if (isLHS) {\n          this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, {\n            at: node\n          });\n        } else {\n          this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n            at: node\n          });\n        }\n        this.toAssignable(node.expression, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n          node.left = this.typeCastToParameter(node.left);\n        }\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isLHS);\n        break;\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSTypeAssertion\":\n      case \"TSNonNullExpression\":\n        this.checkToRestConversion(node.expression, false);\n        break;\n      default:\n        super.checkToRestConversion(node, allowPattern);\n    }\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn({\n      TSTypeCastExpression: true,\n      TSParameterProperty: \"parameter\",\n      TSNonNullExpression: \"expression\",\n      TSAsExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n      TSSatisfiesExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n      TSTypeAssertion: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true]\n    }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  parseBindingAtom() {\n    if (this.state.type === 78) {\n      return this.parseIdentifier(true);\n    }\n    return super.parseBindingAtom();\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n      this.unexpected(null, 10);\n    }\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    }\n    return super.checkCommaAfterRest(close);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, {\n        at: node.typeAnnotation\n      });\n    }\n    return node;\n  }\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        this.finishOp(48, 1);\n        return;\n      }\n      if (code === 60) {\n        this.finishOp(47, 1);\n        return;\n      }\n    }\n    super.getTokenFromCode(code);\n  }\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n    return type;\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n    return super.shouldParseArrow(params);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n    return param;\n  }\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n  parseClass(node, isStatement, optionalId) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n    try {\n      return super.parseClass(node, isStatement, optionalId);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n  tsParseAbstractDeclaration(node, decorators) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));\n    } else if (this.isContextual(127)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n          at: node\n        });\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {\n    const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, {\n          at: method,\n          methodName: key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n        });\n      }\n    }\n    return method;\n  }\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.parse();\n  }\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.getExpression();\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);\n  }\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      if (isImport) {\n        leftOfAs = this.parseIdentifier(true);\n        if (!this.isContextual(93)) {\n          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);\n        }\n      } else {\n        leftOfAs = this.parseModuleExportName();\n      }\n    }\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n        at: loc\n      });\n    }\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n    if (isImport) {\n      this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);\n    }\n  }\n};\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  const {\n    computed,\n    property\n  } = expression;\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nfunction isValidAmbientConstInitializer(expression, estree) {\n  var _expression$extra;\n  const {\n    type\n  } = expression;\n  if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const {\n        value\n      } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\nfunction isNumber(expression, estree) {\n  if (estree) {\n    return expression.type === \"Literal\" && (typeof expression.value === \"number\" || \"bigint\" in expression);\n  }\n  return expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\";\n}\nfunction isNegativeNumber(expression, estree) {\n  if (expression.type === \"UnaryExpression\") {\n    const {\n      operator,\n      argument\n    } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\"\n});\nvar placeholders = superClass => class PlaceholdersParserMixin extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(142)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace();\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace();\n      this.expect(142);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      this.finishOp(142, 2);\n    } else {\n      super.getTokenFromCode(code);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(refExpressionErrors);\n  }\n  parseIdentifier(liberal) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word !== undefined) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"Placeholder\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  toAssignable(node, isLHS) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (super.chStartsBindingIdentifier(ch, pos)) {\n      return true;\n    }\n    const nextToken = this.lookahead();\n    if (nextToken.type === 142) {\n      return true;\n    }\n    return false;\n  }\n  verifyBreakContinue(node, isBreak) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(node, isBreak);\n  }\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(node, expr);\n    }\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n  parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);\n  }\n  parseFunctionId(requireId) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId);\n  }\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (placeholder) {\n      if (this.match(81) || this.match(142) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n          at: this.state.startLoc\n        });\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n    super.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || super.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n  parseExport(node, decorators) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(node, decorators);\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node, decorators);\n  }\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(142), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    var _specifiers;\n    if ((_specifiers = node.specifiers) != null && _specifiers.length) {\n      return true;\n    }\n    return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n  }\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(node);\n    node.specifiers = [];\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    node.specifiers.push(this.finishNode(specifier, \"ImportDefaultSpecifier\"));\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n    this.expectContextual(97);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource();\n  }\n  assertNoSpace() {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      this.raise(PlaceholderErrors.UnexpectedSpace, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }\n};\nvar v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName();\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);\n  }\n};\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return plugin[1][option];\n  }\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n    if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean, if specified.\");\n    }\n    const allowCallParenthesized = getPluginOption(plugins, \"decorators\", \"allowCallParenthesized\");\n    if (allowCallParenthesized != null && typeof allowCallParenthesized !== \"boolean\") {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\") || hasPlugin(plugins, \"importAttributes\")) {\n        throw new Error(\"Cannot combine importAssertions, importAttributes and moduleAttributes plugins.\");\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n  if (hasPlugin(plugins, \"importAssertions\") && hasPlugin(plugins, \"importAttributes\")) {\n    throw new Error(\"Cannot combine importAssertions and importAttributes plugins.\");\n  }\n  if (hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowNewTargetOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true,\n  annexB: true\n};\nfunction getOptions(opts) {\n  if (opts && opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n  const options = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, {\n          at: key\n        });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, {\n            at: key\n          });\n        }\n      }\n      protoRef.used = true;\n    }\n  }\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(137)) {\n      this.unexpected();\n    }\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n  parseExpressionBase(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(12)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(106)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const {\n      type\n    } = this.state;\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      if (this.match(29)) {\n        this.toAssignable(left, true);\n        node.left = left;\n        const startIndex = startLoc.index;\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\")\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    return left;\n  }\n  parseMaybeConditional(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(136) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n  parseExprOps(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value\n        });\n      }\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n        this.next();\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc\n            });\n          }\n        }\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc\n          });\n        }\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n  parseExprOpRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(106)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n  parseExprOpBaseRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n  parseHackPipeBody() {\n    var _body$extra;\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipeTopicUnused, {\n        at: startLoc\n      });\n    }\n    return body;\n  }\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument\n      });\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(34);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, {\n            at: node\n          });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, {\n            at: node\n          });\n        }\n      }\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {\n          at: startLoc\n        });\n        return this.parseAwait(startLoc);\n      }\n    }\n    return expr;\n  }\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      const updateExpressionNode = node;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\")\n      });\n      return node;\n    }\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: expr = this.finishNode(node, \"UpdateExpression\")\n      });\n    }\n    return expr;\n  }\n  parseExprSubscripts(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseSubscripts(expr, startLoc);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n    let optional = false;\n    if (type === 18) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, {\n          at: this.state.startLoc\n        });\n        if (this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n  parseMember(base, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(136)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, {\n          at: startLoc\n        });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n  parseBind(base, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startLoc, noCalls);\n  }\n  parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    const node = this.startNodeAt(startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n    let finishedNode = this.finishCallExpression(node, optionalChainMember);\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return finishedNode;\n  }\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n  parseTaggedTemplateExpression(base, startLoc, state) {\n    const node = this.startNodeAt(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, {\n        at: startLoc\n      });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n  expectImportAttributesPlugin() {\n    if (!this.hasPlugin(\"importAssertions\")) {\n      this.expectPlugin(\"importAttributes\");\n    }\n  }\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectImportAttributesPlugin();\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount: this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? 2 : 1\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, {\n              at: arg\n            });\n          }\n        }\n      }\n    }\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAttributes\") && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n  parseNoCallExpr() {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    let decorators = null;\n    const {\n      type\n    } = this.state;\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n      case 83:\n        node = this.startNode();\n        this.next();\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n        if (!this.match(10)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n      case 132:\n        return this.parseNumericLiteral(this.state.value);\n      case 133:\n        return this.parseBigIntLiteral(this.state.value);\n      case 134:\n        return this.parseDecimalLiteral(this.state.value);\n      case 131:\n        return this.parseStringLiteral(this.state.value);\n      case 84:\n        return this.parseNullLiteral();\n      case 85:\n        return this.parseBooleanLiteral(true);\n      case 86:\n        return this.parseBooleanLiteral(false);\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n      case 26:\n        decorators = this.parseDecorators();\n      case 80:\n        return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);\n      case 77:\n        return this.parseNewOrNewTarget();\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(Errors.UnsupportedBind, {\n              at: callee\n            });\n          }\n        }\n      case 136:\n        {\n          this.raise(Errors.PrivateInExpectedIn, {\n            at: this.state.startLoc,\n            identifierName: this.state.value\n          });\n          return this.parsePrivateName();\n        }\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          }\n          this.unexpected();\n          break;\n        }\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          } else {\n            this.unexpected();\n          }\n          break;\n        }\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(125) && this.lookaheadInLineCharCode() === 123) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === \"smart\" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {\n          at: startLoc\n        });\n      }\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType)\n      });\n    }\n  }\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n      case \"smart\":\n        return tokenType === 27;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, {\n          at: startLoc\n        });\n    }\n  }\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition()\n      });\n    }\n    this.expect(19);\n    return this.parseArrowExpression(node, params, true);\n  }\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.SuperNotAllowed, {\n        at: node\n      });\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.UnexpectedSuper, {\n        at: node\n      });\n    }\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(Errors.UnsupportedSuper, {\n        at: node\n      });\n    }\n    return this.finishNode(node, \"Super\");\n  }\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      if (this.match(102)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName\n      });\n    }\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n    if (this.isContextual(100)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, {\n          at: id\n        });\n      }\n      this.sawUnambiguousESM = true;\n    }\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n      if (this.match(21)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startLoc);\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n    return this.wrapParenthesis(startLoc, val);\n  }\n  wrapParenthesis(startLoc, expression) {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n      this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);\n      return expression;\n    }\n    const parenExpression = this.startNodeAt(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n  parseParenItem(node, startLoc) {\n    return node;\n  }\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {\n        this.raise(Errors.UnexpectedNewTarget, {\n          at: metaProp\n        });\n      }\n      return metaProp;\n    }\n    return this.parseNew(node);\n  }\n  parseNew(node) {\n    this.parseNewCallee(node);\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n    return this.finishNode(node, \"NewExpression\");\n  }\n  parseNewCallee(node) {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, {\n        at: node.callee\n      });\n    }\n  }\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)\n        });\n      }\n    }\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return finishedNode;\n  }\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(Errors.InvalidRecordProperty, {\n          at: prop\n        });\n      }\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n      node.properties.push(prop);\n    }\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc\n        });\n      }\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n    prop.method = false;\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n    return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n  checkGetterSetterParams(method) {\n    var _params;\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: method\n      });\n    }\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: method\n      });\n    }\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc\n          });\n        }\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 132:\n            key = this.parseNumericLiteral(value);\n            break;\n          case 131:\n            key = this.parseStringLiteral(value);\n            break;\n          case 133:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case 134:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case 136:\n            {\n              const privateKeyLoc = this.state.startLoc;\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(Errors.UnexpectedPrivateField, {\n                  at: privateKeyLoc\n                });\n              }\n              key = this.parsePrivateName();\n              break;\n            }\n          default:\n            this.unexpected();\n        }\n      }\n      prop.key = key;\n      if (type !== 136) {\n        prop.computed = false;\n      }\n    }\n    return prop.key;\n  }\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return finishedNode;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n        if (hasStrictModeDirective && nonSimple) {\n          this.raise(Errors.IllegalLanguageModeDirective, {\n            at: (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node\n          });\n        }\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n        if (this.state.strict && node.id) {\n          this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n  isSimpleParameter(node) {\n    return node.type === \"Identifier\";\n  }\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = !allowDuplicates && new Set();\n    const formalParameters = {\n      type: \"FormalParameters\"\n    };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged\n      });\n    }\n  }\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\"\n        });\n      }\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n    return elt;\n  }\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(liberal);\n    return this.createIdentifier(node, name);\n  }\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n  parseIdentifierName(liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(130);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n    this.next();\n    return name;\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word\n      });\n      return;\n    }\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc\n        });\n        return;\n      }\n      this.expressionScope.recordAsyncArrowParametersError({\n        at: startLoc\n      });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, {\n          at: startLoc\n        });\n        return;\n      }\n    }\n  }\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n  parseAwait(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {\n      at: node\n    });\n    if (this.eat(55)) {\n      this.raise(Errors.ObsoleteAwaitStar, {\n        at: node\n      });\n    }\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 101 && !this.state.containsEsc || type === 135 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {\n      at: node\n    });\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n      switch (this.state.type) {\n        case 13:\n        case 137:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc\n        });\n      }\n    }\n  }\n  parseSmartPipelineBodyInStyle(childExpr, startLoc) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, {\n        at: this.state.startLoc\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, {\n        at: startLoc\n      });\n    }\n  }\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n  parseFSharpPipelineBody(prec) {\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    if (!this.match(5)) {\n      this.unexpected(null, 5);\n    }\n    const program = this.startNodeAt(this.state.endLoc);\n    this.next();\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n  parsePropertyNamePrefixOperator(prop) {}\n}\nconst loopLabel = {\n    kind: \"loop\"\n  },\n  switchLabel = {\n    kind: \"switch\"\n  };\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n    if (typeof type === \"number\") {\n      {\n        if (type === 136) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(130),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n    return this.finishNode(file, \"File\");\n  }\n  parseProgram(program, end = 137, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, {\n          at,\n          localName\n        });\n      }\n    }\n    let finishedProgram;\n    if (end === 137) {\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      finishedProgram = this.finishNodeAt(program, \"Program\", createPositionWithColumnOffset(this.state.startLoc, -1));\n    }\n    return finishedProgram;\n  }\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n  isLet() {\n    if (!this.isContextual(99)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === 92) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  chStartsBindingPattern(ch) {\n    return ch === 91 || ch === 123;\n  }\n  hasFollowingBindingAtom() {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);\n  }\n  hasInLineFollowingBindingIdentifier() {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n  startsUsingForOf() {\n    const {\n      type,\n      containsEsc\n    } = this.lookahead();\n    if (type === 101 && !containsEsc) {\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n  startsAwaitUsing() {\n    let next = this.nextTokenInLineStart();\n    if (this.isUnparsedContextual(next, \"using\")) {\n      next = this.nextTokenInLineStartSince(next + 5);\n      const nextCh = this.codePointAtPos(next);\n      if (this.chStartsBindingIdentifier(nextCh, next)) {\n        this.expectPlugin(\"explicitResourceManagement\");\n        return true;\n      }\n    }\n    return false;\n  }\n  parseModuleItem() {\n    return this.parseStatementLike(1 | 2 | 4 | 8);\n  }\n  parseStatementListItem() {\n    return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));\n  }\n  parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {\n    let flags = 0;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= 4;\n      if (allowLabeledFunction) {\n        flags |= 8;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n  parseStatement() {\n    return this.parseStatementLike(0);\n  }\n  parseStatementLike(flags) {\n    let decorators = null;\n    if (this.match(26)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n  parseStatementContent(flags, decorators) {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & 2);\n    const allowFunctionDeclaration = !!(flags & 4);\n    const topLevel = flags & 1;\n    switch (starttype) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n      case 64:\n        return this.parseDebuggerStatement(node);\n      case 90:\n        return this.parseDoWhileStatement(node);\n      case 91:\n        return this.parseForStatement(node);\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, {\n            at: this.state.startLoc\n          });\n        }\n        return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);\n      case 80:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(this.maybeTakeDecorators(decorators, node), true);\n      case 69:\n        return this.parseIfStatement(node);\n      case 70:\n        return this.parseReturnStatement(node);\n      case 71:\n        return this.parseSwitchStatement(node);\n      case 72:\n        return this.parseThrowStatement(node);\n      case 73:\n        return this.parseTryStatement(node);\n      case 96:\n        if (!this.state.containsEsc && this.startsAwaitUsing()) {\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, {\n              at: node\n            });\n          } else if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, {\n              at: node\n            });\n          }\n          this.next();\n          return this.parseVarStatement(node, \"await using\");\n        }\n        break;\n      case 105:\n        if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifier()) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc\n          });\n        }\n        return this.parseVarStatement(node, \"using\");\n      case 99:\n        {\n          if (this.state.containsEsc) {\n            break;\n          }\n          const next = this.nextTokenStart();\n          const nextCh = this.codePointAtPos(next);\n          if (nextCh !== 91) {\n            if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {\n              break;\n            }\n          }\n        }\n      case 75:\n        {\n          if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, {\n              at: this.state.startLoc\n            });\n          }\n        }\n      case 74:\n        {\n          const kind = this.state.value;\n          return this.parseVarStatement(node, kind);\n        }\n      case 92:\n        return this.parseWhileStatement(node);\n      case 76:\n        return this.parseWithStatement(node);\n      case 5:\n        return this.parseBlock();\n      case 13:\n        return this.parseEmptyStatement(node);\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(Errors.UnexpectedImportExport, {\n              at: this.state.startLoc\n            });\n          }\n          this.next();\n          let result;\n          if (starttype === 83) {\n            result = this.parseImport(node);\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node, decorators);\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n          this.assertModuleNodeAllowed(result);\n          return result;\n        }\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (!allowDeclaration) {\n              this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n                at: this.state.startLoc\n              });\n            }\n            this.next();\n            return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);\n          }\n        }\n    }\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, flags);\n    } else {\n      return this.parseExpressionStatement(node, expr, decorators);\n    }\n  }\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, {\n        at: node\n      });\n    }\n  }\n  decoratorsEnabledBeforeExport() {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false;\n  }\n  maybeTakeDecorators(maybeDecorators, classNode, exportNode) {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        if (typeof this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== \"boolean\") {\n          this.raise(Errors.DecoratorsBeforeAfterExport, {\n            at: classNode.decorators[0]\n          });\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n  parseDecorators(allowExport) {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(26));\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, {\n          at: this.state.startLoc\n        });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n    return decorators;\n  }\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n    const node = this.startNode();\n    this.next();\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr;\n      if (this.match(10)) {\n        const startLoc = this.state.startLoc;\n        this.next();\n        expr = this.parseExpression();\n        this.expect(11);\n        expr = this.wrapParenthesis(startLoc, expr);\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (this.getPluginOption(\"decorators\", \"allowCallParenthesized\") === false && node.expression !== expr) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(136)) {\n            this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n    return expr;\n  }\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n  verifyBreakContinue(node, isBreak) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, {\n        at: node,\n        type\n      });\n    }\n  }\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n  parseDoWhileStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n    if (this.isAwaitAllowed() && this.eatContextual(96)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n    const startsWithLet = this.isContextual(99);\n    {\n      const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();\n      const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(105) && this.startsUsingForOf();\n      const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;\n      if (this.match(74) || this.match(75) || isLetOrUsing) {\n        const initNode = this.startNode();\n        let kind;\n        if (startsWithAwaitUsing) {\n          kind = \"await using\";\n          if (!this.isAwaitAllowed()) {\n            this.raise(Errors.AwaitUsingNotInAsyncContext, {\n              at: this.state.startLoc\n            });\n          }\n          this.next();\n        } else {\n          kind = this.state.value;\n        }\n        this.next();\n        this.parseVar(initNode, true, kind);\n        const init = this.finishNode(initNode, \"VariableDeclaration\");\n        const isForIn = this.match(58);\n        if (isForIn && starsWithUsingDeclaration) {\n          this.raise(Errors.ForInUsing, {\n            at: init\n          });\n        }\n        if ((isForIn || this.isContextual(101)) && init.declarations.length === 1) {\n          return this.parseForIn(node, init, awaitAt);\n        }\n        if (awaitAt !== null) {\n          this.unexpected(awaitAt);\n        }\n        return this.parseFor(node, init);\n      }\n    }\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(101);\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, {\n          at: init\n        });\n      }\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(Errors.ForOfAsync, {\n          at: init\n        });\n      }\n    }\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, {\n        in: {\n          type\n        }\n      });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n  parseFunctionStatement(node, isAsync, isHangingDeclaration) {\n    this.next();\n    return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));\n  }\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, {\n        at: this.state.startLoc\n      });\n    }\n    this.next();\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n  parseThrowStatement(node) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    this.scope.enter(this.options.annexB && param.type === \"Identifier\" ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: {\n        type: \"CatchClause\"\n      },\n      binding: BIND_CATCH_PARAM\n    });\n    return param;\n  }\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, {\n        at: node\n      });\n    }\n    return this.finishNode(node, \"TryStatement\");\n  }\n  parseVarStatement(node, kind, allowMissingInitializer = false) {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, {\n        at: this.state.startLoc\n      });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    return this.finishNode(node, \"WithStatement\");\n  }\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n  parseLabeledStatement(node, maybeName, expr, flags) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName\n        });\n      }\n    }\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(5);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n    while (!this.match(end)) {\n      const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n          continue;\n        }\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n    this.next();\n  }\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n      });\n    }\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: {\n          type: \"ForStatement\"\n        }\n      });\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n  parseVar(node, isFor, kind, allowMissingInitializer = false) {\n    const declarations = node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      if (decl.init === null && !allowMissingInitializer) {\n        if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\"\n          });\n        } else if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\"\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n    return node;\n  }\n  parseVarId(decl, kind) {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: {\n        type: \"VariableDeclarator\"\n      },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL\n    });\n    decl.id = id;\n  }\n  parseAsyncFunctionExpression(node) {\n    return this.parseFunction(node, 8);\n  }\n  parseFunction(node, flags = 0) {\n    const hangingDeclaration = flags & 2;\n    const isDeclaration = !!(flags & 1);\n    const requireId = isDeclaration && !(flags & 4);\n    const isAsync = !!(flags & 8);\n    this.initFunction(node, isAsync);\n    if (this.match(55)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc\n        });\n      }\n      this.next();\n      node.generator = true;\n    }\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n    if (isDeclaration && !hangingDeclaration) {\n      this.registerFunctionStatementId(node);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n  parseFunctionParams(node, isConstructor) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));\n    this.expressionScope.exit();\n  }\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n  }\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n  isClassMethod() {\n    return this.match(10);\n  }\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc\n            });\n          }\n          continue;\n        }\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n        const member = this.startNode();\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n        this.parseClassMember(classBody, member, state);\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(Errors.DecoratorConstructor, {\n            at: member\n          });\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(104);\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(136);\n      this.parseClassElementName(method);\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key\n        });\n      }\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(136);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, {\n            at: key\n          });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, {\n            at: key\n          });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n      method.kind = \"method\";\n      const isPrivate = this.match(136);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, {\n            at: publicMethod.key\n          });\n        }\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(136);\n      this.parseClassElementName(publicMethod);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, {\n            at: publicMethod.key\n          });\n        }\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n      this.checkGetterSetterParams(publicMethod);\n    } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(136);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n    if ((type === 130 || type === 131) && member.static && value === \"prototype\") {\n      this.raise(Errors.StaticPrototype, {\n        at: this.state.startLoc\n      });\n    }\n    if (type === 136) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n    return this.parsePropertyName(member);\n  }\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(Errors.DecoratorStaticBlock, {\n        at: member\n      });\n    }\n  }\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(Errors.ConstructorClassField, {\n        at: prop.key\n      });\n    }\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n  }\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed) {\n      const key = prop.key;\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        this.raise(Errors.ConstructorClassField, {\n          at: key\n        });\n      }\n    }\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {}\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n  parseExport(node, decorators) {\n    const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, 5);\n    }\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, 97);\n    }\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      var _node2$declaration;\n      const node2 = node;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n    if (this.eat(65)) {\n      const node2 = node;\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      this.checkExport(node2, true, true);\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n    this.unexpected(null, 5);\n  }\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n  maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);\n      const id = maybeDefaultIdentifier || this.parseIdentifier(true);\n      const specifier = this.startNodeAtNode(id);\n      specifier.exported = id;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenInLineStart();\n    return this.isUnparsedContextual(next, \"function\");\n  }\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    if (this.match(68)) {\n      this.next();\n      return this.parseFunction(expr, 1 | 4);\n    } else if (this.isAsyncFunction()) {\n      this.next();\n      this.next();\n      return this.parseFunction(expr, 1 | 4 | 8);\n    }\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n        this.raise(Errors.DecoratorBeforeExport, {\n          at: this.state.startLoc\n        });\n      }\n      return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);\n    }\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc\n      });\n    }\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n  parseExportDeclaration(node) {\n    if (this.match(80)) {\n      const node = this.parseClass(this.startNode(), true, false);\n      return node;\n    }\n    return this.parseStatementListItem();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 99) {\n        return false;\n      }\n      if ((type === 128 || type === 127) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n        if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n    return false;\n  }\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(97)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      this.maybeParseImportAttributes(node);\n      this.checkJSONModuleImport(node);\n    } else if (expect) {\n      this.unexpected();\n    }\n    this.semicolon();\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true) {\n          this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n        return true;\n      }\n    }\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n          const declaration = node.declaration;\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName\n              });\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n  checkDuplicateExports(node, exportName) {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, {\n          at: node\n        });\n      } else {\n        this.raise(Errors.DuplicateExport, {\n          at: node,\n          exportName\n        });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(128);\n      const isString = this.match(131);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n    return nodes;\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n  parseModuleExportName() {\n    if (this.match(131)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0)\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n  isJSONModuleImport(node) {\n    if (node.assertions != null) {\n      return node.assertions.some(({\n        key,\n        value\n      }) => {\n        return value.value === \"json\" && (key.type === \"Identifier\" ? key.name === \"type\" : key.value === \"type\");\n      });\n    }\n    return false;\n  }\n  checkImportReflection(node) {\n    if (node.module) {\n      var _node$assertions;\n      if (node.specifiers.length !== 1 || node.specifiers[0].type !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start\n        });\n      }\n      if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start\n        });\n      }\n    }\n  }\n  checkJSONModuleImport(node) {\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      const {\n        specifiers\n      } = node;\n      if (specifiers != null) {\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\" ? imported.name !== \"default\" : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start\n          });\n        }\n      }\n    }\n  }\n  isPotentialImportPhase(isExport) {\n    return !isExport && this.isContextual(125);\n  }\n  applyImportPhase(node, isExport, phase, loc) {\n    if (isExport) {\n      return;\n    }\n    if (phase === \"module\") {\n      this.expectPlugin(\"importReflection\", loc);\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n  parseMaybeImportPhase(node, isExport) {\n    if (!this.isPotentialImportPhase(isExport)) {\n      this.applyImportPhase(node, isExport, null);\n      return null;\n    }\n    const phaseIdentifier = this.parseIdentifier(true);\n    const {\n      type\n    } = this.state;\n    const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 97 || this.lookaheadCharCode() === 102 : type !== 12;\n    if (isImportPhase) {\n      this.resetPreviousIdentifierLeadingComments(phaseIdentifier);\n      this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);\n      return null;\n    } else {\n      this.applyImportPhase(node, isExport, null);\n      return phaseIdentifier;\n    }\n  }\n  isPrecedingIdImportPhase(phase) {\n    const {\n      type\n    } = this.state;\n    return tokenIsIdentifier(type) ? type !== 97 || this.lookaheadCharCode() === 102 : type !== 12;\n  }\n  parseImport(node) {\n    if (this.match(131)) {\n      return this.parseImportSourceAndAttributes(node);\n    }\n    return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));\n  }\n  parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {\n    node.specifiers = [];\n    const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);\n    const parseNext = !hasDefault || this.eat(12);\n    const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n    if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n    this.expectContextual(97);\n    return this.parseImportSourceAndAttributes(node);\n  }\n  parseImportSourceAndAttributes(node) {\n    var _node$specifiers;\n    (_node$specifiers = node.specifiers) != null ? _node$specifiers : node.specifiers = [];\n    node.source = this.parseImportSource();\n    this.maybeParseImportAttributes(node);\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    if (!this.match(131)) this.unexpected();\n    return this.parseExprAtom();\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  finishImportSpecifier(specifier, type, bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      in: {\n        type\n      },\n      binding: bindingType\n    });\n    return this.finishNode(specifier, type);\n  }\n  parseImportAttributes() {\n    this.expect(5);\n    const attrs = [];\n    const attrNames = new Set();\n    do {\n      if (this.match(8)) {\n        break;\n      }\n      const node = this.startNode();\n      const keyName = this.state.value;\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(131)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(14);\n      if (!this.match(131)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n    this.expect(8);\n    return attrs;\n  }\n  parseModuleAttributes() {\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key\n        });\n      }\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(14);\n      if (!this.match(131)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n    return attrs;\n  }\n  maybeParseImportAttributes(node) {\n    let attributes;\n    let useWith = false;\n    if (this.match(76)) {\n      if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {\n        return;\n      }\n      this.next();\n      {\n        if (this.hasPlugin(\"moduleAttributes\")) {\n          attributes = this.parseModuleAttributes();\n        } else {\n          this.expectImportAttributesPlugin();\n          attributes = this.parseImportAttributes();\n        }\n      }\n      useWith = true;\n    } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      if (this.hasPlugin(\"importAttributes\")) {\n        if (this.getPluginOption(\"importAttributes\", \"deprecatedAssertSyntax\") !== true) {\n          this.raise(Errors.ImportAttributesUseAssert, {\n            at: this.state.startLoc\n          });\n        }\n        this.addExtra(node, \"deprecatedAssertSyntax\", true);\n      } else {\n        this.expectOnePlugin([\"importAttributes\", \"importAssertions\"]);\n      }\n      this.next();\n      attributes = this.parseImportAttributes();\n    } else if (this.hasPlugin(\"importAttributes\") || this.hasPlugin(\"importAssertions\")) {\n      attributes = [];\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) {\n        attributes = [];\n      } else return;\n    }\n    if (!useWith && this.hasPlugin(\"importAssertions\")) {\n      node.assertions = attributes;\n    } else {\n      node.attributes = attributes;\n    }\n  }\n  maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {\n    if (maybeDefaultIdentifier) {\n      const specifier = this.startNodeAtNode(maybeDefaultIdentifier);\n      specifier.local = maybeDefaultIdentifier;\n      node.specifiers.push(this.finishImportSpecifier(specifier, \"ImportDefaultSpecifier\"));\n      return true;\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc\n          });\n        }\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const specifier = this.startNode();\n      const importedIsString = this.match(131);\n      const isMaybeTypeOnly = this.isContextual(128);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly, undefined);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\", bindingType);\n  }\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\nfunction parse(input, options) {\n  var _options;\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\nconst tokTypes = generateExportedTokenTypes(tt);\nfunction getParser(options, input) {\n  let cls = Parser;\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n  return new cls(options, input);\n}\nconst parserClassCache = {};\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;\n//# sourceMappingURL=index.js.map\n"],"mappings":"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,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC;AAClhE,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC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"},"metadata":{},"sourceType":"script"}