{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.declare = declare;\nexports.declarePreset = void 0;\nconst apiPolyfills = {\n  assertVersion: api => range => {\n    throwVersionError(range, api.version);\n  }\n};\n{\n  Object.assign(apiPolyfills, {\n    targets: () => () => {\n      return {};\n    },\n    assumption: () => () => {\n      return undefined;\n    }\n  });\n}\nfunction declare(builder) {\n  return (api, options, dirname) => {\n    var _clonedApi2;\n    let clonedApi;\n    for (const name of Object.keys(apiPolyfills)) {\n      var _clonedApi;\n      if (api[name]) continue;\n      (_clonedApi = clonedApi) != null ? _clonedApi : clonedApi = copyApiObject(api);\n      clonedApi[name] = apiPolyfills[name](clonedApi);\n    }\n    return builder((_clonedApi2 = clonedApi) != null ? _clonedApi2 : api, options || {}, dirname);\n  };\n}\nconst declarePreset = declare;\nexports.declarePreset = declarePreset;\nfunction copyApiObject(api) {\n  let proto = null;\n  if (typeof api.version === \"string\" && /^7\\./.test(api.version)) {\n    proto = Object.getPrototypeOf(api);\n    if (proto && (!has(proto, \"version\") || !has(proto, \"transform\") || !has(proto, \"template\") || !has(proto, \"types\"))) {\n      proto = null;\n    }\n  }\n  return Object.assign({}, proto, api);\n}\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction throwVersionError(range, version) {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n    range = `^${range}.0.0-0`;\n  }\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n  const limit = Error.stackTraceLimit;\n  if (typeof limit === \"number\" && limit < 25) {\n    Error.stackTraceLimit = 25;\n  }\n  let err;\n  if (version.slice(0, 2) === \"7.\") {\n    err = new Error(`Requires Babel \"^7.0.0-beta.41\", but was loaded with \"${version}\". ` + `You'll need to update your @babel/core version.`);\n  } else {\n    err = new Error(`Requires Babel \"${range}\", but was loaded with \"${version}\". ` + `If you are sure you have a compatible version of @babel/core, ` + `it is likely that something in your build process is loading the ` + `wrong version. Inspect the stack trace of this error to look for ` + `the first entry that doesn't mention \"@babel/core\" or \"babel-core\" ` + `to see what is calling Babel.`);\n  }\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version,\n    range\n  });\n}","map":{"version":3,"sources":["../src/index.ts"],"names":["apiPolyfills","assertVersion","api","range","throwVersionError","version","Object","assign","targets","assumption","undefined","declare","builder","options","dirname","clonedApi","name","keys","copyApiObject","declarePreset","exports","proto","test","getPrototypeOf","has","obj","key","prototype","hasOwnProperty","call","Number","isInteger","Error","limit","stackTraceLimit","err","slice","code"],"mappings":"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","sourcesContent":["import type {\n  PluginAPI,\n  PluginObject,\n  PluginPass,\n  PresetAPI,\n  PresetObject,\n} from \"@babel/core\";\n\ntype APIPolyfillFactory<T extends keyof PluginAPI> = (\n  api: PluginAPI,\n) => PluginAPI[T];\n\ntype APIPolyfills = {\n  assertVersion: APIPolyfillFactory<\"assertVersion\">;\n};\n\nconst apiPolyfills: APIPolyfills = {\n  // Not supported by Babel 7 and early versions of Babel 7 beta.\n  // It's important that this is polyfilled for older Babel versions\n  // since it's needed to report the version mismatch.\n  assertVersion: (api: PluginAPI) => (range: number | string) => {\n    throwVersionError(range, api.version);\n  },\n};\nif (!process.env.BABEL_8_BREAKING) {\n  Object.assign(apiPolyfills, {\n    // This is supported starting from Babel 7.13\n    targets: () => () => {\n      return {};\n    },\n    // This is supported starting from Babel 7.13\n    assumption: () => () => {\n      return undefined;\n    },\n  });\n}\n\nexport function declare<State = {}, Option = {}>(\n  builder: (\n    api: PluginAPI,\n    options: Option,\n    dirname: string,\n  ) => PluginObject<State & PluginPass>,\n): (\n  api: PluginAPI,\n  options: Option,\n  dirname: string,\n) => PluginObject<State & PluginPass> {\n  return (api, options: Option, dirname: string) => {\n    let clonedApi: PluginAPI;\n\n    for (const name of Object.keys(\n      apiPolyfills,\n    ) as (keyof typeof apiPolyfills)[]) {\n      if (api[name]) continue;\n\n      clonedApi ??= copyApiObject(api);\n      clonedApi[name] = apiPolyfills[name](clonedApi);\n    }\n\n    // @ts-expect-error options || {} may not be assigned to Options\n    return builder(clonedApi ?? api, options || {}, dirname);\n  };\n}\n\nexport const declarePreset = declare as <Option = {}>(\n  builder: (api: PresetAPI, options: Option, dirname: string) => PresetObject,\n) => (api: PresetAPI, options: Option, dirname: string) => PresetObject;\n\nfunction copyApiObject(api: PluginAPI): PluginAPI {\n  // Babel >= 7 <= beta.41 passed the API as a new object that had\n  // babel/core as the prototype. While slightly faster, it also\n  // means that the Object.assign copy below fails. Rather than\n  // keep complexity, the Babel 6 behavior has been reverted and this\n  // normalizes all that for Babel 7.\n  let proto = null;\n  if (typeof api.version === \"string\" && /^7\\./.test(api.version)) {\n    proto = Object.getPrototypeOf(api);\n    if (\n      proto &&\n      (!has(proto, \"version\") ||\n        !has(proto, \"transform\") ||\n        !has(proto, \"template\") ||\n        !has(proto, \"types\"))\n    ) {\n      proto = null;\n    }\n  }\n\n  return {\n    ...proto,\n    ...api,\n  };\n}\n\nfunction has(obj: {}, key: string) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction throwVersionError(range: string | number, version: string) {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n    range = `^${range}.0.0-0`;\n  }\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n\n  const limit = Error.stackTraceLimit;\n\n  if (typeof limit === \"number\" && limit < 25) {\n    // Bump up the limit if needed so that users are more likely\n    // to be able to see what is calling Babel.\n    Error.stackTraceLimit = 25;\n  }\n\n  let err;\n  if (version.slice(0, 2) === \"7.\") {\n    err = new Error(\n      `Requires Babel \"^7.0.0-beta.41\", but was loaded with \"${version}\". ` +\n        `You'll need to update your @babel/core version.`,\n    );\n  } else {\n    err = new Error(\n      `Requires Babel \"${range}\", but was loaded with \"${version}\". ` +\n        `If you are sure you have a compatible version of @babel/core, ` +\n        `it is likely that something in your build process is loading the ` +\n        `wrong version. Inspect the stack trace of this error to look for ` +\n        `the first entry that doesn't mention \"@babel/core\" or \"babel-core\" ` +\n        `to see what is calling Babel.`,\n    );\n  }\n\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version,\n    range,\n  } as any);\n}\n"]},"metadata":{},"sourceType":"script"}