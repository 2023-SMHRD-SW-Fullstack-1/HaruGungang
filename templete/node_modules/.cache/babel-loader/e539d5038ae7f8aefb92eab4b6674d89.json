{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nclass Binding {\n  constructor({\n    identifier,\n    scope,\n    path,\n    kind\n  }) {\n    this.identifier = void 0;\n    this.scope = void 0;\n    this.path = void 0;\n    this.kind = void 0;\n    this.constantViolations = [];\n    this.constant = true;\n    this.referencePaths = [];\n    this.referenced = false;\n    this.references = 0;\n    this.identifier = identifier;\n    this.scope = scope;\n    this.path = path;\n    this.kind = kind;\n    if ((kind === \"var\" || kind === \"hoisted\") && isDeclaredInLoop(path || (() => {\n      throw new Error(\"Internal Babel error: unreachable \");\n    })())) {\n      this.reassign(path);\n    }\n    this.clearValue();\n  }\n  deoptValue() {\n    this.clearValue();\n    this.hasDeoptedValue = true;\n  }\n  setValue(value) {\n    if (this.hasDeoptedValue) return;\n    this.hasValue = true;\n    this.value = value;\n  }\n  clearValue() {\n    this.hasDeoptedValue = false;\n    this.hasValue = false;\n    this.value = null;\n  }\n  reassign(path) {\n    this.constant = false;\n    if (this.constantViolations.indexOf(path) !== -1) {\n      return;\n    }\n    this.constantViolations.push(path);\n  }\n  reference(path) {\n    if (this.referencePaths.indexOf(path) !== -1) {\n      return;\n    }\n    this.referenced = true;\n    this.references++;\n    this.referencePaths.push(path);\n  }\n  dereference() {\n    this.references--;\n    this.referenced = !!this.references;\n  }\n}\nexports.default = Binding;\nfunction isDeclaredInLoop(path) {\n  for (let {\n    parentPath,\n    key\n  } = path; parentPath; ({\n    parentPath,\n    key\n  } = parentPath)) {\n    if (parentPath.isFunctionParent()) return false;\n    if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && key === \"body\") {\n      return true;\n    }\n  }\n  return false;\n}","map":{"version":3,"sources":["../../src/scope/binding.ts"],"names":["Binding","identifier","scope","path","kind","constructor","isDeclaredInLoop","Error","reassign","clearValue","constantViolations","constant","referencePaths","referenced","references","deoptValue","hasDeoptedValue","setValue","value","hasValue","indexOf","push","reference","dereference","exports","parentPath","key","isFunctionParent","isWhile","isForXStatement","isForStatement"],"mappings":"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","sourcesContent":["import type NodePath from \"../path\";\nimport type * as t from \"@babel/types\";\nimport type Scope from \"./index\";\n\nexport type BindingKind =\n  | \"var\" /* var declarator */\n  | \"let\" /* let declarator, class declaration id, catch clause parameters */\n  | \"const\" /* const/using declarator */\n  | \"module\" /* import specifiers */\n  | \"hoisted\" /* function declaration id */\n  | \"param\" /* function declaration parameters */\n  | \"local\" /* function expression id, class expression id */\n  | \"unknown\"; /* export specifiers */\n/**\n * This class is responsible for a binding inside of a scope.\n *\n * It tracks the following:\n *\n *  * Node path.\n *  * Amount of times referenced by other nodes.\n *  * Paths to nodes that reassign or modify this binding.\n *  * The kind of binding. (Is it a parameter, declaration etc)\n */\n\nexport default class Binding {\n  identifier: t.Identifier;\n  scope: Scope;\n  path: NodePath;\n  kind: BindingKind;\n\n  constructor({\n    identifier,\n    scope,\n    path,\n    kind,\n  }: {\n    identifier: t.Identifier;\n    scope: Scope;\n    path: NodePath;\n    kind: BindingKind;\n  }) {\n    this.identifier = identifier;\n    this.scope = scope;\n    this.path = path;\n    this.kind = kind;\n\n    if (\n      (kind === \"var\" || kind === \"hoisted\") &&\n      // https://github.com/rollup/rollup/issues/4654\n      // Rollup removes the path argument from this call. Add an\n      // unreachable IIFE (that rollup doesn't know is unreachable)\n      // with side effects, to prevent it from messing up with arguments.\n      // You can reproduce this with\n      //   BABEL_8_BREAKING=true make prepublish-build\n      isDeclaredInLoop(\n        path ||\n          (() => {\n            throw new Error(\"Internal Babel error: unreachable \");\n          })(),\n      )\n    ) {\n      this.reassign(path);\n    }\n\n    this.clearValue();\n  }\n\n  constantViolations: Array<NodePath> = [];\n  constant: boolean = true;\n\n  referencePaths: Array<NodePath> = [];\n  referenced: boolean = false;\n  references: number = 0;\n\n  declare hasDeoptedValue: boolean;\n  declare hasValue: boolean;\n  declare value: any;\n\n  deoptValue() {\n    this.clearValue();\n    this.hasDeoptedValue = true;\n  }\n\n  setValue(value: any) {\n    if (this.hasDeoptedValue) return;\n    this.hasValue = true;\n    this.value = value;\n  }\n\n  clearValue() {\n    this.hasDeoptedValue = false;\n    this.hasValue = false;\n    this.value = null;\n  }\n\n  /**\n   * Register a constant violation with the provided `path`.\n   */\n\n  reassign(path: NodePath) {\n    this.constant = false;\n    if (this.constantViolations.indexOf(path) !== -1) {\n      return;\n    }\n    this.constantViolations.push(path);\n  }\n\n  /**\n   * Increment the amount of references to this binding.\n   */\n\n  reference(path: NodePath) {\n    if (this.referencePaths.indexOf(path) !== -1) {\n      return;\n    }\n    this.referenced = true;\n    this.references++;\n    this.referencePaths.push(path);\n  }\n\n  /**\n   * Decrement the amount of references to this binding.\n   */\n\n  dereference() {\n    this.references--;\n    this.referenced = !!this.references;\n  }\n}\n\nfunction isDeclaredInLoop(path: NodePath) {\n  for (\n    let { parentPath, key } = path;\n    parentPath;\n    { parentPath, key } = parentPath\n  ) {\n    if (parentPath.isFunctionParent()) return false;\n    if (\n      parentPath.isWhile() ||\n      parentPath.isForXStatement() ||\n      (parentPath.isForStatement() && key === \"body\")\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n"]},"metadata":{},"sourceType":"script"}